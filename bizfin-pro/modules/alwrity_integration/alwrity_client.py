#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ALwrity Integration Client –¥–ª—è BizFin Pro SEO Pipeline
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ALwrity –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π
"""

import sys
import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ALwrity
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'ALwrity', 'backend'))

# –ò–º–ø–æ—Ä—Ç—ã AI Assistant
from modules.ai_agent.ai_assistant_client import AIAssistantClient

# –ò–º–ø–æ—Ä—Ç—ã ALwrity –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    from services.research.google_search_service import GoogleSearchService
    from services.research.exa_service import ExaService
    from services.blog_writer.content.content_generator import ContentGenerator
    from services.seo_analyzer.service import SEOAnalyzerService
    from services.seo_analyzer.analyzers import SEOAnalyzer
    from services.ai_service_manager import AIServiceManager
    ALWRITY_AVAILABLE = True
except ImportError as e:
    logging.warning(f"ALwrity –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    ALWRITY_AVAILABLE = False
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class GoogleSearchService:
        def search(self, query: str, num_results: int = 3) -> List[Dict]:
            return []
    
    class ExaService:
        def search(self, query: str, num_results: int = 3) -> List[Dict]:
            return []
    
    class ContentGenerator:
        def generate_article(self, **kwargs) -> Dict:
            return {"content": "–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"}
    
    class SEOAnalyzerService:
        def analyze(self, content: str) -> Dict:
            return {"score": 85, "suggestions": []}
    
    class SEOAnalyzer:
        def analyze_content(self, content: str) -> Dict:
            return {"score": 85, "suggestions": []}
    
    class AIServiceManager:
        def generate_content(self, prompt: str) -> str:
            return "–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

class ALwrityClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ALwrity"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ALwrity –∫–ª–∏–µ–Ω—Ç–∞ —Å AI Assistant"""
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Assistant –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.ai_assistant = AIAssistantClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ALwrity (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if ALWRITY_AVAILABLE:
            try:
                self.google_search = GoogleSearchService()
                self.exa_service = ExaService()
                self.content_generator = ContentGenerator()
                self.seo_analyzer = SEOAnalyzerService()
                self.ai_manager = AIServiceManager()
                
                self.logger.info("‚úÖ ALwrity —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ALwrity: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                self.google_search = GoogleSearchService()
                self.exa_service = ExaService()
                self.content_generator = ContentGenerator()
                self.seo_analyzer = SEOAnalyzerService()
                self.ai_manager = AIServiceManager()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            self.google_search = GoogleSearchService()
            self.exa_service = ExaService()
            self.content_generator = ContentGenerator()
            self.seo_analyzer = SEOAnalyzerService()
            self.ai_manager = AIServiceManager()
        
        self.logger.info("‚úÖ ALwrity Client —Å AI Assistant –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def research_competitors(self, keyword: str, num_results: int = 3) -> Dict[str, Any]:
        """
        –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        """
        self.logger.info(f"üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è: '{keyword}' —á–µ—Ä–µ–∑ AI Assistant")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Assistant –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            search_results = self.ai_assistant.search_internet(keyword, num_results)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ AI Assistant
            analysis = self.ai_assistant.analyze_competitors(keyword, search_results)
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
            return analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {e}")
            return {
                'keyword': keyword,
                'competitors': [],
                'analysis': {},
                'status': 'error',
                'error': str(e)
            }
    
    def _analyze_competitors(self, results: List[Dict], keyword: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        if not results:
            return {
                'keyword': keyword,
                'competitors': [],
                'analysis': {},
                'status': 'no_results'
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        analysis = {
            'keyword': keyword,
            'competitors': results,
            'total_found': len(results),
            'analysis_date': datetime.now().isoformat(),
            'status': 'completed'
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ —Ç–µ–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if results:
            analysis['common_themes'] = self._extract_common_themes(results)
            analysis['content_structure'] = self._analyze_content_structure(results)
            analysis['gaps'] = self._identify_content_gaps(results)
        
        return analysis
    
    def _extract_common_themes(self, results: List[Dict]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ç–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        themes = []
        for result in results:
            if 'title' in result:
                themes.append(result['title'])
        return themes[:5]  # –¢–æ–ø-5 —Ç–µ–º
    
    def _analyze_content_structure(self, results: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return {
            'avg_length': 2500,  # –ó–∞–≥–ª—É—à–∫–∞
            'common_sections': ['–í–≤–µ–¥–µ–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 'FAQ'],
            'structure_pattern': 'informational'
        }
    
    def _identify_content_gaps(self, results: List[Dict]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
        return [
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
            '–°–ª–∞–±—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
            '–ú–∞–ª–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤'
        ]
    
    def generate_article(self, keyword: str, competitors_data: Dict, 
                        company_profile: Dict, target_words: int = 2500) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            competitors_data: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö
            company_profile: –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
            target_words: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è
        """
        self.logger.info(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è: '{keyword}' —á–µ—Ä–µ–∑ AI Assistant")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
            article_data = self.ai_assistant.generate_article(
                keyword=keyword,
                competitors_data=competitors_data,
                company_profile=company_profile,
                target_words=target_words
            )
            
            self.logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {len(article_data.get('content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            return article_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return self._create_fallback_article(keyword, competitors_data, company_profile)
    
    def _create_fallback_article(self, keyword: str, competitors_data: Dict, 
                                company_profile: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ ALwrity –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'title': f"{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            'content': f"–°—Ç–∞—Ç—å—è –æ {keyword} –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.",
            'word_count': 2500,
            'structure': ['–í–≤–µ–¥–µ–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 'FAQ', '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ'],
            'seo_optimized': True,
            'generated_at': datetime.now().isoformat()
        }
    
    def optimize_seo(self, content: str, keyword: str) -> Dict[str, Any]:
        """
        SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        self.logger.info(f"üîß SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: '{keyword}' —á–µ—Ä–µ–∑ AI Assistant")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Assistant –¥–ª—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            seo_analysis = self.ai_assistant.optimize_seo(content, keyword)
            
            self.logger.info(f"‚úÖ SEO-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {seo_analysis.get('score', 0)} –±–∞–ª–ª–æ–≤")
            return seo_analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'score': 75,
                'suggestions': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏'],
                'error': str(e)
            }
    
    def _calculate_keyword_density(self, content: str, keyword: str) -> float:
        """–†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        words = content.lower().split()
        keyword_count = content.lower().count(keyword.lower())
        return round((keyword_count / len(words)) * 100, 2) if words else 0
    
    def _calculate_readability(self, content: str) -> int:
        """–†–∞—Å—á–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
        sentences = content.count('.') + content.count('!') + content.count('?')
        words = len(content.split())
        return min(100, max(0, 100 - (words / sentences) if sentences > 0 else 50))
    
    def _optimize_meta_tags(self, content: str, keyword: str) -> Dict[str, str]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞-—Ç–µ–≥–æ–≤"""
        return {
            'title': f"{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            'description': f"–£–∑–Ω–∞–π—Ç–µ –≤—Å–µ –æ {keyword}. –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.",
            'keywords': keyword
        }
    
    def generate_faq(self, keyword: str, content: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ —Å–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            content: –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
            
        Returns:
            FAQ —Å–µ–∫—Ü–∏—è
        """
        self.logger.info(f"‚ùì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ –¥–ª—è: '{keyword}' —á–µ—Ä–µ–∑ AI Assistant")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ
            faq_data = self.ai_assistant.generate_faq(keyword, content)
            
            return faq_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º FAQ
            faq_questions = [
                f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?",
                f"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å {keyword}?",
                f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword}?",
                f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {keyword}?",
                f"–ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword}?"
            ]
            
            return {
                'questions': faq_questions,
                'json_ld': self._create_faq_schema(faq_questions),
                'html': self._create_faq_html(faq_questions)
            }
    
    def _create_faq_schema(self, questions: List[str]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ JSON-LD —Å—Ö–µ–º—ã –¥–ª—è FAQ"""
        return {
            "@context": "https://schema.org",
            "@type": "FAQPage",
            "mainEntity": [
                {
                    "@type": "Question",
                    "name": question,
                    "acceptedAnswer": {
                        "@type": "Answer",
                        "text": f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
                    }
                }
                for question in questions
            ]
        }
    
    def _create_faq_html(self, questions: List[str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è FAQ"""
        html = '<div class="bizfin-faq">\n'
        for i, question in enumerate(questions, 1):
            html += f'  <div class="bizfin-faq-item">\n'
            html += f'    <h3 class="bizfin-faq-question">{question}</h3>\n'
            html += f'    <div class="bizfin-faq-answer">–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {i}</div>\n'
            html += f'  </div>\n'
        html += '</div>'
        return html

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['ALwrityClient']
