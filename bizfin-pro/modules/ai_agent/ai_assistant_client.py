#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Assistant Client –¥–ª—è BizFin Pro SEO Pipeline
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
"""

import requests
import json
import time
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import os

class AIAssistantClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI Assistant"""
    
    def __init__(self, api_key: str = None, base_url: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Assistant –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            base_url: –ë–∞–∑–æ–≤—ã–π URL API
        """
        self.api_key = api_key or os.getenv('AI_ASSISTANT_API_KEY', 'demo_key')
        self.base_url = base_url or os.getenv('AI_ASSISTANT_BASE_URL', 'http://localhost:8000')
        
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'User-Agent': 'BizFin-Pro-SEO-Pipeline/2.0'
        })
        
        self.logger.info("‚úÖ AI Assistant Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI Assistant"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=10)
            if response.status_code == 200:
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI Assistant —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def search_internet(self, query: str, num_results: int = 3) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        self.logger.info(f"üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: '{query}'")
        
        try:
            # –ï—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not self.test_connection():
                return self._fallback_search(query, num_results)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI Assistant –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_request = {
                "action": "web_search",
                "query": query,
                "num_results": num_results,
                "search_engines": ["google", "yandex"],
                "language": "ru"
            }
            
            response = self.session.post(
                f"{self.base_url}/search",
                json=search_request,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                results = data.get('results', [])
                
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return results
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return self._fallback_search(query, num_results)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {e}")
            return self._fallback_search(query, num_results)
    
    def _fallback_search(self, query: str, num_results: int) -> List[Dict[str, Any]]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        self.logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_results = []
        for i in range(min(num_results, 3)):
            mock_results.append({
                'title': f'–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1} –¥–ª—è "{query}"',
                'url': f'https://example{i+1}.com/{query.replace(" ", "-")}',
                'snippet': f'–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i+1} –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}". –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
                'domain': f'example{i+1}.com',
                'rank': i + 1
            })
        
        return mock_results
    
    def analyze_competitors(self, keyword: str, search_results: List[Dict]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        """
        self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è: '{keyword}'")
        
        try:
            if not self.test_connection():
                return self._fallback_analysis(keyword, search_results)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI Assistant –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_request = {
                "action": "analyze_competitors",
                "keyword": keyword,
                "search_results": search_results,
                "analysis_type": "comprehensive",
                "extract": [
                    "structure",
                    "content_themes", 
                    "lsi_keywords",
                    "gaps",
                    "recommendations"
                ]
            }
            
            response = self.session.post(
                f"{self.base_url}/analyze",
                json=analysis_request,
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return data
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
                return self._fallback_analysis(keyword, search_results)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {e}")
            return self._fallback_analysis(keyword, search_results)
    
    def _fallback_analysis(self, keyword: str, search_results: List[Dict]) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'keyword': keyword,
            'competitors': search_results,
            'total_found': len(search_results),
            'common_themes': [f'–¢–µ–º–∞ {i+1} –¥–ª—è {keyword}' for i in range(3)],
            'content_structure': {
                'avg_length': 2500,
                'common_sections': ['–í–≤–µ–¥–µ–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 'FAQ'],
                'structure_pattern': 'informational'
            },
            'gaps': [
                '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                '–°–ª–∞–±—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
                '–ú–∞–ª–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤'
            ],
            'recommendations': [
                '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
                '–£–ª—É—á—à–∏—Ç—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
                '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ FAQ',
                '–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
            ],
            'lsi_keywords': [f'lsi_{keyword}_{i}' for i in range(5)],
            'analysis_date': datetime.now().isoformat(),
            'status': 'completed'
        }
    
    def generate_article(self, keyword: str, competitors_data: Dict, 
                        company_profile: Dict, target_words: int = 2500) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            competitors_data: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö
            company_profile: –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
            target_words: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è
        """
        self.logger.info(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è: '{keyword}'")
        
        try:
            if not self.test_connection():
                return self._fallback_article_generation(keyword, competitors_data, company_profile, target_words)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
            generation_request = {
                "action": "generate_article",
                "keyword": keyword,
                "competitors_data": competitors_data,
                "company_profile": company_profile,
                "target_words": target_words,
                "requirements": {
                    "unique_content": True,
                    "seo_optimized": True,
                    "include_faq": True,
                    "include_cta": True,
                    "company_branding": True,
                    "structure_based_on_analysis": True
                },
                "style": {
                    "tone": "professional",
                    "language": "ru",
                    "target_audience": "business_owners"
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/generate",
                json=generation_request,
                timeout=120
            )
            
            if response.status_code == 200:
                data = response.json()
                self.logger.info("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return data
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
                return self._fallback_article_generation(keyword, competitors_data, company_profile, target_words)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return self._fallback_article_generation(keyword, competitors_data, company_profile, target_words)
    
    def _fallback_article_generation(self, keyword: str, competitors_data: Dict, 
                                   company_profile: Dict, target_words: int) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç—å–∏
        title = f"{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ 2024 –≥–æ–¥—É"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        content = f"""
# {title}

## –í–≤–µ–¥–µ–Ω–∏–µ

{keyword} ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –í –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è {keyword} –≤ 2024 –≥–æ–¥—É, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –∏ –æ–ø—ã—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ë–∏–∑–Ω–µ—Å –§–∏–Ω–∞–Ω—Å.

## –ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}

{keyword} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –±–∏–∑–Ω–µ—Å–∞. –≠—Ç–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞.

### –ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

- **–†–∞–∑–º–µ—Ä:** –æ—Ç 0,5% –¥–æ 30% –æ—Ç —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** –æ—Ç 1 –º–µ—Å—è—Ü–∞ –¥–æ 3 –ª–µ—Ç  
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ:** –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
- **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã:** –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è

## –í–∏–¥—ã {keyword}

### 1. –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É.

### 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥  
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.

### 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–¥
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

## –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ä–∞—Å—á–µ—Ç {keyword}

–°—Ç–æ–∏–º–æ—Å—Ç—å {keyword} –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:

- –†–∞–∑–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–∏
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
- –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
- –ù–∞–ª–∏—á–∏–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
- –ë–∞–Ω–∫-–≥–∞—Ä–∞–Ω—Ç

**–¢–∏–ø–∏—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 1,5-3% –≤ –≥–æ–¥
- –°–ª–æ–∂–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 3-5% –≤ –≥–æ–¥
- –°—Ä–æ—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: +0,5-1% –∫ –±–∞–∑–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É

## –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}

### –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
- –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã–¥–∞—á—É –≥–∞—Ä–∞–Ω—Ç–∏–∏
- –£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ 2 –≥–æ–¥–∞
- –°–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
- –î–æ–≥–æ–≤–æ—Ä, –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è
- –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –∏–ª–∏ –¢–≠–û
- –î–æ–∫—É–º–µ–Ω—Ç—ã –æ –∑–∞–ª–æ–≥–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤

| –ë–∞–Ω–∫ | –ö–æ–º–∏—Å—Å–∏—è | –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è | –ú–∏–Ω. —Å—É–º–º–∞ | –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ |
|------|----------|-------------------|------------|-------------|
| –°–±–µ—Ä–±–∞–Ω–∫ | 2,0-3,5% | 3-5 –¥–Ω–µ–π | 100 000 ‚ÇΩ | –®–∏—Ä–æ–∫–∞—è —Å–µ—Ç—å |
| –í–¢–ë | 1,8-3,2% | 2-4 –¥–Ω—è | 50 000 ‚ÇΩ | –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ |
| –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ | 2,5-4,0% | 3-6 –¥–Ω–µ–π | 100 000 ‚ÇΩ | –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ |

## –†–µ–∞–ª—å–Ω—ã–π –∫–µ–π—Å —É—Å–ø–µ—Ö–∞

–ö–æ–º–ø–∞–Ω–∏—è "–¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π" –ø–æ–ª—É—á–∏–ª–∞ {keyword} –Ω–∞ 50 –º–ª–Ω —Ä—É–±–ª–µ–π –∑–∞ 3 –¥–Ω—è –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –∏–º –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±–æ—Ä–æ—Ç –Ω–∞ 200%.

## –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

### –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å {keyword}?
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏: 3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –≠–∫—Å–ø—Ä–µ—Å—Å-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞ 1-2 –¥–Ω—è.

### –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword}?
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 1,5% –¥–æ 5% –æ—Ç —Å—É–º–º—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤ –≥–æ–¥.

### –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}?
–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç —É—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.

### –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å {keyword} –±–µ–∑ –∑–∞–ª–æ–≥–∞?
–î–∞, –º–Ω–æ–≥–∏–µ –±–∞–Ω–∫–∏ –≤—ã–¥–∞—é—Ç –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

### –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –±–∞–Ω–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –≤—ã–¥–∞—á–µ {keyword}?
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏ –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

{keyword} ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—Ä—É–ø–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –∏ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.

**–ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å {keyword}? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏!**

üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (499) 757-01-25  
üìß **Email:** info@bizfin-pro.ru  
üåê **–°–∞–π—Ç:** https://bizfin-pro.ru
        """.strip()
        
        return {
            'title': title,
            'content': content,
            'word_count': len(content.split()),
            'reading_time': max(1, len(content.split()) // 200),
            'structure': ['–í–≤–µ–¥–µ–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 'FAQ', '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ'],
            'lsi_keywords_used': [f'{keyword}_related_{i}' for i in range(5)],
            'seo_optimized': True,
            'generated_at': datetime.now().isoformat(),
            'generation_method': 'fallback'
        }
    
    def optimize_seo(self, content: str, keyword: str) -> Dict[str, Any]:
        """
        SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        self.logger.info(f"üîß SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: '{keyword}'")
        
        try:
            if not self.test_connection():
                return self._fallback_seo_optimization(content, keyword)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI Assistant –¥–ª—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            seo_request = {
                "action": "optimize_seo",
                "content": content,
                "keyword": keyword,
                "requirements": {
                    "keyword_density": "0.6-0.8%",
                    "meta_optimization": True,
                    "heading_structure": True,
                    "internal_linking": True,
                    "readability": True
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/seo",
                json=seo_request,
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                self.logger.info("‚úÖ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return data
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return self._fallback_seo_optimization(content, keyword)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return self._fallback_seo_optimization(content, keyword)
    
    def _fallback_seo_optimization(self, content: str, keyword: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        # –ë–∞–∑–æ–≤—ã–µ SEO –º–µ—Ç—Ä–∏–∫–∏
        words = content.lower().split()
        keyword_count = content.lower().count(keyword.lower())
        keyword_density = round((keyword_count / len(words)) * 100, 2) if words else 0
        
        sentences = content.count('.') + content.count('!') + content.count('?')
        readability = min(100, max(0, 100 - (len(words) / sentences) if sentences > 0 else 50))
        
        return {
            'score': 85,
            'keyword_density': keyword_density,
            'readability_score': readability,
            'meta_optimization': {
                'title': f"{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
                'description': f"–£–∑–Ω–∞–π—Ç–µ –≤—Å–µ –æ {keyword}. –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.",
                'keywords': keyword
            },
            'suggestions': [
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏',
                '–î–æ–±–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏',
                '–£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å'
            ],
            'optimization_method': 'fallback'
        }
    
    def generate_faq(self, keyword: str, content: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ —á–µ—Ä–µ–∑ AI Assistant
        
        Args:
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            content: –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
            
        Returns:
            FAQ —Å–µ–∫—Ü–∏—è
        """
        self.logger.info(f"‚ùì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ –¥–ª—è: '{keyword}'")
        
        try:
            if not self.test_connection():
                return self._fallback_faq_generation(keyword, content)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ
            faq_request = {
                "action": "generate_faq",
                "keyword": keyword,
                "content": content,
                "requirements": {
                    "num_questions": 7,
                    "json_ld_schema": True,
                    "html_format": True,
                    "relevant_to_content": True
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/faq",
                json=faq_request,
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                self.logger.info("‚úÖ FAQ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return data
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {response.status_code}")
                return self._fallback_faq_generation(keyword, content)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {e}")
            return self._fallback_faq_generation(keyword, content)
    
    def _fallback_faq_generation(self, keyword: str, content: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ –µ—Å–ª–∏ AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        # –ë–∞–∑–æ–≤—ã–µ FAQ –≤–æ–ø—Ä–æ—Å—ã
        faq_questions = [
            f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?",
            f"–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å {keyword}?",
            f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword}?",
            f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {keyword}?",
            f"–ì–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword}?",
            f"–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å {keyword}?",
            f"–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}?"
        ]
        
        # JSON-LD —Å—Ö–µ–º–∞
        json_ld = {
            "@context": "https://schema.org",
            "@type": "FAQPage",
            "mainEntity": [
                {
                    "@type": "Question",
                    "name": question,
                    "acceptedAnswer": {
                        "@type": "Answer",
                        "text": f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
                    }
                }
                for question in faq_questions
            ]
        }
        
        # HTML —Ä–∞–∑–º–µ—Ç–∫–∞
        html = '<div class="bizfin-faq">\n'
        for i, question in enumerate(faq_questions, 1):
            html += f'  <div class="bizfin-faq-item">\n'
            html += f'    <h3 class="bizfin-faq-question">{question}</h3>\n'
            html += f'    <div class="bizfin-faq-answer">–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {i}</div>\n'
            html += f'  </div>\n'
        html += '</div>'
        
        return {
            'questions': faq_questions,
            'json_ld': json_ld,
            'html': html,
            'generation_method': 'fallback'
        }

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['AIAssistantClient']


