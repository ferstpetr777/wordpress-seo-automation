#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ALwrity —Å BizFin Pro SEO Pipeline
"""

import sys
import os
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from modules.alwrity_integration.alwrity_client import ALwrityClient
from config.company_profile import CompanyData
from config.legal_compliance import ComplianceChecker

def test_alwrity_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ALwrity"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ALWRITY")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    alwrity_client = ALwrityClient()
    company_data = CompanyData()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    test_keyword = "—Ç–µ–Ω–¥–µ—Ä–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è"
    
    print(f"üîë –¢–µ—Å—Ç–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{test_keyword}'")
    print(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_data.get_company_stats()['experience']}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    print("\n1Ô∏è‚É£ –¢–ï–°–¢: –ü—Ä–∞–≤–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    print("-" * 40)
    
    if ComplianceChecker.check_internet_access():
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É: OK")
    else:
        print("‚ùå –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É: –ù–ï–¢")
        return False
    
    # –¢–µ—Å—Ç 2: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    print("\n2Ô∏è‚É£ –¢–ï–°–¢: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
    print("-" * 40)
    
    try:
        start_time = time.time()
        research_result = alwrity_client.research_competitors(test_keyword, num_results=3)
        research_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {research_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {research_result.get('status', 'unknown')}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {research_result.get('total_found', 0)}")
        
        if research_result.get('competitors'):
            print("üèÜ –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:")
            for i, competitor in enumerate(research_result['competitors'][:3], 1):
                print(f"   {i}. {competitor.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        
        if research_result.get('common_themes'):
            print(f"üéØ –û–±—â–∏–µ —Ç–µ–º—ã: {', '.join(research_result['common_themes'][:3])}")
        
        if research_result.get('gaps'):
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–µ–ª—ã: {', '.join(research_result['gaps'][:2])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
    print("\n3Ô∏è‚É£ –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏")
    print("-" * 40)
    
    try:
        start_time = time.time()
        article_data = alwrity_client.generate_article(
            keyword=test_keyword,
            competitors_data=research_result,
            company_profile=company_data.get_company_stats(),
            target_words=2500
        )
        generation_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        print(f"üìä –°–ª–æ–≤: {article_data.get('word_count', 0)}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {article_data.get('reading_time', 0)} –º–∏–Ω—É—Ç")
        
        if article_data.get('structure'):
            print(f"üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(article_data['structure'])} —Ä–∞–∑–¥–µ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 4: SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    print("\n4Ô∏è‚É£ –¢–ï–°–¢: SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("-" * 40)
    
    try:
        seo_result = alwrity_client.optimize_seo(article_data['content'], test_keyword)
        
        print(f"üìà SEO –±–∞–ª–ª: {seo_result.get('score', 0)}")
        print(f"üîë –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {seo_result.get('keyword_density', 0)}%")
        print(f"üìñ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {seo_result.get('readability_score', 0)}")
        
        if seo_result.get('suggestions'):
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(seo_result['suggestions'])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ
    print("\n5Ô∏è‚É£ –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ")
    print("-" * 40)
    
    try:
        faq_data = alwrity_client.generate_faq(test_keyword, article_data['content'])
        
        print(f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ FAQ: {len(faq_data.get('questions', []))}")
        print("üìã –í–æ–ø—Ä–æ—Å—ã:")
        for i, question in enumerate(faq_data.get('questions', [])[:3], 1):
            print(f"   {i}. {question}")
        
        if faq_data.get('json_ld'):
            print("‚úÖ JSON-LD —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {e}")
        return False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {test_keyword}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {research_result.get('total_found', 0)}")
    print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–æ–≤: {article_data.get('word_count', 0)}")
    print(f"üìà SEO –±–∞–ª–ª: {seo_result.get('score', 0)}")
    print(f"‚ùì FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(faq_data.get('questions', []))}")
    
    print("\nüöÄ ALwrity –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    return True

def test_end_to_end():
    """End-to-end —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\nüîÑ END-TO-END –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 60)
    
    try:
        from scripts.pipeline_v2 import BizFinProPipeline
        
        pipeline = BizFinProPipeline()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –ò–ü"
        
        print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º: '{test_keyword}'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        result = pipeline.run_full_pipeline(
            keyword=test_keyword,
            priority='medium',
            target_volume=2500,
            target_intent='informational'
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   Keyword ID: {result.keyword_id}")
        
        if result.data:
            print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(result.data, indent=2, ensure_ascii=False)}")
        
        if result.errors:
            print(f"   –û—à–∏–±–∫–∏: {', '.join(result.errors)}")
        
        return result.status == 'completed'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ E2E —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BIZFIN PRO + ALWRITY –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ALwrity
    integration_success = test_alwrity_integration()
    
    if integration_success:
        # End-to-end —Ç–µ—Å—Ç
        e2e_success = test_end_to_end()
        
        print("\n" + "=" * 80)
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 80)
        
        if e2e_success:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("üìà ALwrity —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ BizFin Pro SEO Pipeline")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ALwrity —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ E2E —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ALwrity —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –¥–ª—è ALwrity")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")

if __name__ == "__main__":
    main()


