#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
web_research.py ‚Äî –ö–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–µ–±-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç AI –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –ë–î
"""

import sys
import os
import json
import sqlite3
import subprocess
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from config.database_sqlite import DB_CONFIG

def get_instruction_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ë–î"""
    try:
        db_config = DB_CONFIG.get_config_dict()
        db_path = db_config['database']
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT instruction_data FROM research_instructions 
            WHERE instruction_id = "web_research_standard_2025"
        ''')
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return json.loads(result[0])
        else:
            print("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        return None

def generate_search_queries(keyword, brand_domain=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    instruction = get_instruction_from_db()
    if not instruction:
        return []
    
    queries = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
    primary_query = instruction['web_search_strategy']['primary_search']['query'].format(keyword=keyword)
    queries.append(primary_query)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏
    for search in instruction['web_search_strategy']['secondary_searches']:
        query = search['query'].format(
            keyword=keyword,
            brand_domain=brand_domain or "example.com",
            year="2025"
        )
        queries.append(query)
    
    return queries

def save_research_to_db(keyword, research_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
    try:
        db_config = DB_CONFIG.get_config_dict()
        db_path = db_config['database']
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS auto_web_research (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                research_data TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'completed'
            )
        ''')
        
        insert_query = '''
            INSERT INTO auto_web_research (keyword, research_data, status)
            VALUES (?, ?, ?)
        '''
        
        cursor.execute(insert_query, (
            keyword,
            json.dumps(research_data, ensure_ascii=False),
            'completed'
        ))
        
        research_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return research_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("üîç –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
        print("python3 web_research.py \"–ö–õ–Æ–ß–ï–í–û–ï_–°–õ–û–í–û\" [–ë–†–ï–ù–î_–î–û–ú–ï–ù]")
        print()
        print("üìù –ü–†–ò–ú–ï–†–´:")
        print("python3 web_research.py \"–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è\"")
        print("python3 web_research.py \"—Å–±–µ—Ä–±–∞–Ω–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è\" \"sberbank.ru\"")
        print("python3 web_research.py \"—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏\"")
        return 1
    
    keyword = sys.argv[1]
    brand_domain = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"üîç –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–ï–ë-–ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
    print(f"üéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
    if brand_domain:
        print(f"üåê –ë—Ä–µ–Ω–¥ –¥–æ–º–µ–Ω: {brand_domain}")
    print("=" * 70)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_queries = generate_search_queries(keyword, brand_domain)
    
    if not search_queries:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        return 1
    
    print(f"üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(search_queries)}")
    for i, query in enumerate(search_queries, 1):
        print(f"   {i}. {query}")
    
    print()
    print("üåê –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê –í –ò–ù–¢–ï–†–ù–ï–¢–ï...")
    print("   (–í—ã–∑—ã–≤–∞–µ—Ç—Å—è AI –∞–≥–µ–Ω—Ç –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞)")
    print()
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ AI –∞–≥–µ–Ω—Ç–∞
    # –ü–æ–∫–∞ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("ü§ñ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø AI –ê–ì–ï–ù–¢–ê:")
    print(f"   –í—ã–ø–æ–ª–Ω–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º:")
    for i, query in enumerate(search_queries, 1):
        print(f"   {i}. {query}")
    print()
    print("üìã –í–´–ü–û–õ–ù–ò –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –í—ã–ø–æ–ª–Ω–∏ web_search() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    print("   2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ë–î")
    print("   3. –°–æ–±–µ—Ä–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    print("   4. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î")
    print()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç AI –∞–≥–µ–Ω—Ç–∞)
    research_data = {
        "keyword": keyword,
        "brand_domain": brand_domain,
        "search_queries": search_queries,
        "executed_at": datetime.now().isoformat(),
        "status": "ready_for_ai_agent",
        "instruction_version": "1.0"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    research_id = save_research_to_db(keyword, research_data)
    
    if research_id:
        print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (ID: {research_id})")
        print("ü§ñ –¢–µ–ø–µ—Ä—å AI –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫")
        return 0
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
        return 1

if __name__ == "__main__":
    exit(main())
