#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ web_research_standard_2025 –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
"""

import os
import sys
import sqlite3
import json
import logging
from datetime import datetime

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def get_instruction_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger = setup_logging()
    
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        db_path = os.path.join(os.path.dirname(__file__), '..', 'db', 'bizfin_pro.db')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        cursor.execute("""
            SELECT instruction_id, title, version, instruction_data, created_at, updated_at 
            FROM research_instructions 
            WHERE instruction_id = 'web_research_standard_2025'
        """)
        
        result = cursor.fetchone()
        
        if not result:
            logger.error("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        instruction_id, title, version, instruction_data, created_at, updated_at = result
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        instruction = json.loads(instruction_data)
        
        cursor.close()
        connection.close()
        
        return instruction
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        if 'connection' in locals():
            connection.close()
        return None

def format_instruction_readable(instruction):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    
    output = []
    output.append("=" * 80)
    output.append(f"üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –í–ï–ë-–ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –î–õ–Ø SEO-–ê–ù–ê–õ–ò–ó–ê")
    output.append("=" * 80)
    output.append("")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    output.append(f"üÜî Instruction ID: {instruction.get('id', 'N/A')}")
    output.append(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {instruction.get('title', 'N/A')}")
    output.append(f"üìä –í–µ—Ä—Å–∏—è: {instruction.get('version', 'N/A')}")
    output.append(f"üë§ –ê–≤—Ç–æ—Ä: {instruction.get('author', 'N/A')}")
    output.append(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {instruction.get('created_at', 'N/A')}")
    output.append("")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    output.append("üìñ –û–ü–ò–°–ê–ù–ò–ï:")
    output.append(f"   {instruction.get('description', 'N/A')}")
    output.append("")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    output.append("‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´:")
    params = instruction.get('parameters', {})
    for key, value in params.items():
        output.append(f"   ‚Ä¢ {key}: {value}")
    output.append("")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
    output.append("üîç –°–¢–†–ê–¢–ï–ì–ò–Ø –í–ï–ë-–ü–û–ò–°–ö–ê:")
    web_search = instruction.get('web_search_strategy', {})
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
    primary = web_search.get('primary_search', {})
    output.append("   üéØ –û–°–ù–û–í–ù–û–ô –ü–û–ò–°–ö:")
    output.append(f"      –ó–∞–ø—Ä–æ—Å: {primary.get('query', 'N/A')}")
    output.append(f"      –¶–µ–ª—å: {primary.get('purpose', 'N/A')}")
    output.append(f"      –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {primary.get('expected_results', 'N/A')}")
    output.append("")
    
    # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏
    secondary = web_search.get('secondary_searches', [])
    output.append(f"   üîç –í–¢–û–†–ò–ß–ù–´–ï –ü–û–ò–°–ö–ò ({len(secondary)} —à—Ç.):")
    for i, search in enumerate(secondary, 1):
        output.append(f"      {i}. {search.get('query', 'N/A')}")
        output.append(f"         –¶–µ–ª—å: {search.get('purpose', 'N/A')}")
        output.append(f"         –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {search.get('expected_results', 'N/A')}")
        output.append("")
    
    # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    output.append("üìö –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ô:")
    methodology = instruction.get('research_methodology', {})
    for step_key, step_data in methodology.items():
        step_num = step_key.replace('step_', '')
        output.append(f"   {step_num}. {step_data.get('title', 'N/A')}")
        output.append(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {step_data.get('description', 'N/A')}")
        output.append(f"      –í—ã–≤–æ–¥: {step_data.get('output', 'N/A')}")
        output.append("")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    output.append("üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:")
    data_processing = instruction.get('data_processing', {})
    for section, details in data_processing.items():
        output.append(f"   üìä {details.get('title', 'N/A')}:")
        if 'fields' in details:
            output.append(f"      –ü–æ–ª—è: {', '.join(details['fields'])}")
        if 'method' in details:
            output.append(f"      –ú–µ—Ç–æ–¥: {details['method']}")
        output.append("")
    
    # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    output.append("üìÑ –§–û–†–ú–ê–¢ –í–´–í–û–î–ê:")
    output_format = instruction.get('output_format', {})
    for key, value in output_format.items():
        output.append(f"   ‚Ä¢ {key}: {value}")
    output.append("")
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    output.append("üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    requirements = instruction.get('requirements', {})
    for key, value in requirements.items():
        output.append(f"   ‚Ä¢ {key}: {value}")
    output.append("")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    output.append("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –î–ï–ô–°–¢–í–ò–ï:")
    final_action = instruction.get('final_action', {})
    output.append(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {final_action.get('description', 'N/A')}")
    output.append(f"   –¢–∞–±–ª–∏—Ü–∞ –ë–î: {final_action.get('database_table', 'N/A')}")
    output.append(f"   –§–æ—Ä–º–∞—Ç JSON: {final_action.get('json_format', 'N/A')}")
    output.append(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ID: {final_action.get('id_assignment', 'N/A')}")
    output.append("")
    
    output.append("=" * 80)
    
    return "\n".join(output)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    print("üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ web_research_standard_2025 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –ë–î
    instruction = get_instruction_from_db()
    
    if instruction:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º
        readable_text = format_instruction_readable(instruction)
        print(readable_text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print(f"   üîç –í—Å–µ–≥–æ —à–∞–≥–æ–≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏: {len(instruction.get('research_methodology', {}))}")
        
        secondary_searches = instruction.get('web_search_strategy', {}).get('secondary_searches', [])
        print(f"   üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(secondary_searches)}")
        
        print(f"   üìä –í–µ—Ä—Å–∏—è: {instruction.get('version', 'N/A')}")
        print("=" * 80)
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()

