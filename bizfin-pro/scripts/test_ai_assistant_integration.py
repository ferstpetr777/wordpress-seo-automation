#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI Assistant —Å BizFin Pro SEO Pipeline
"""

import sys
import os
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from modules.ai_agent.ai_assistant_client import AIAssistantClient
from modules.alwrity_integration.alwrity_client import ALwrityClient
from config.company_profile import CompanyData

def test_ai_assistant_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI Assistant"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI ASSISTANT")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Assistant
    ai_client = AIAssistantClient()
    
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI Assistant...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if ai_client.test_connection():
        print("‚úÖ AI Assistant –¥–æ—Å—Ç—É–ø–µ–Ω!")
        return True
    else:
        print("‚ö†Ô∏è AI Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
        return False

def test_ai_assistant_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ AI Assistant"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –í –ò–ù–¢–ï–†–ù–ï–¢–ï")
    print("-" * 40)
    
    ai_client = AIAssistantClient()
    test_keyword = "—Ç–µ–Ω–¥–µ—Ä–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è"
    
    print(f"üîë –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{test_keyword}'")
    
    try:
        start_time = time.time()
        search_results = ai_client.search_internet(test_keyword, num_results=3)
        search_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}")
        
        if search_results:
            print("üèÜ –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(search_results[:3], 1):
                print(f"   {i}. {result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                print(f"      URL: {result.get('url', 'N/A')}")
                print(f"      –î–æ–º–µ–Ω: {result.get('domain', 'N/A')}")
        
        return search_results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def test_ai_assistant_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ AI Assistant"""
    print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–ö–£–†–ï–ù–¢–û–í")
    print("-" * 40)
    
    ai_client = AIAssistantClient()
    test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –ò–ü"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_results = ai_client.search_internet(test_keyword, num_results=3)
    
    print(f"üîë –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{test_keyword}'")
    
    try:
        start_time = time.time()
        analysis = ai_client.analyze_competitors(test_keyword, search_results)
        analysis_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {analysis.get('status', 'unknown')}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analysis.get('total_found', 0)}")
        
        if analysis.get('common_themes'):
            print(f"üéØ –û–±—â–∏–µ —Ç–µ–º—ã: {', '.join(analysis['common_themes'][:3])}")
        
        if analysis.get('gaps'):
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–µ–ª—ã: {', '.join(analysis['gaps'][:2])}")
        
        if analysis.get('recommendations'):
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(analysis['recommendations'][:2])}")
        
        return analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {}

def test_ai_assistant_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ AI Assistant"""
    print("\n‚úçÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–¢–ê–¢–¨–ò")
    print("-" * 40)
    
    ai_client = AIAssistantClient()
    company_data = CompanyData()
    
    test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑ –∑–∞–ª–æ–≥–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    search_results = ai_client.search_internet(test_keyword, num_results=3)
    competitors_data = ai_client.analyze_competitors(test_keyword, search_results)
    
    print(f"üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è: '{test_keyword}'")
    
    try:
        start_time = time.time()
        article_data = ai_client.generate_article(
            keyword=test_keyword,
            competitors_data=competitors_data,
            company_profile=company_data.get_company_stats(),
            target_words=2500
        )
        generation_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        print(f"üìä –°–ª–æ–≤: {article_data.get('word_count', 0)}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {article_data.get('reading_time', 0)} –º–∏–Ω—É—Ç")
        
        if article_data.get('structure'):
            print(f"üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(article_data['structure'])} —Ä–∞–∑–¥–µ–ª–æ–≤")
        
        return article_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return {}

def test_ai_assistant_seo():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI Assistant"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SEO-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("-" * 40)
    
    ai_client = AIAssistantClient()
    test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ–Ω–ª–∞–π–Ω"
    test_content = f"–°—Ç–∞—Ç—å—è –æ {test_keyword} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."
    
    print(f"üîë SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: '{test_keyword}'")
    
    try:
        start_time = time.time()
        seo_result = ai_client.optimize_seo(test_content, test_keyword)
        seo_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è SEO-–∞–Ω–∞–ª–∏–∑–∞: {seo_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà SEO –±–∞–ª–ª: {seo_result.get('score', 0)}")
        print(f"üîë –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {seo_result.get('keyword_density', 0)}%")
        print(f"üìñ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {seo_result.get('readability_score', 0)}")
        
        if seo_result.get('suggestions'):
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(seo_result['suggestions'])}")
        
        return seo_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return {}

def test_ai_assistant_faq():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ —á–µ—Ä–µ–∑ AI Assistant"""
    print("\n‚ùì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò FAQ")
    print("-" * 40)
    
    ai_client = AIAssistantClient()
    test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –û–û–û"
    test_content = f"–°—Ç–∞—Ç—å—è –æ {test_keyword} —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è."
    
    print(f"üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ –¥–ª—è: '{test_keyword}'")
    
    try:
        start_time = time.time()
        faq_data = ai_client.generate_faq(test_keyword, test_content)
        faq_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {faq_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ FAQ: {len(faq_data.get('questions', []))}")
        
        if faq_data.get('questions'):
            print("üìã –í–æ–ø—Ä–æ—Å—ã:")
            for i, question in enumerate(faq_data['questions'][:3], 1):
                print(f"   {i}. {question}")
        
        if faq_data.get('json_ld'):
            print("‚úÖ JSON-LD —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        return faq_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FAQ: {e}")
        return {}

def test_alwrity_with_ai_assistant():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ALwrity —Å AI Assistant"""
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ALWRITY + AI ASSISTANT")
    print("-" * 40)
    
    alwrity_client = ALwrityClient()
    test_keyword = "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"
    
    print(f"üîë –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç ALwrity + AI Assistant –¥–ª—è: '{test_keyword}'")
    
    try:
        # 1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        print("1Ô∏è‚É£ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
        research_result = alwrity_client.research_competitors(test_keyword, num_results=3)
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {research_result.get('total_found', 0)} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
        print("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
        company_data = CompanyData()
        article_data = alwrity_client.generate_article(
            keyword=test_keyword,
            competitors_data=research_result,
            company_profile=company_data.get_company_stats(),
            target_words=2500
        )
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {article_data.get('word_count', 0)} —Å–ª–æ–≤")
        
        # 3. SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        print("3Ô∏è‚É£ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
        seo_result = alwrity_client.optimize_seo(article_data['content'], test_keyword)
        print(f"   ‚úÖ SEO –±–∞–ª–ª: {seo_result.get('score', 0)}")
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ
        print("4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ...")
        faq_data = alwrity_client.generate_faq(test_keyword, article_data['content'])
        print(f"   ‚úÖ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(faq_data.get('questions', []))}")
        
        return {
            'research': research_result,
            'article': article_data,
            'seo': seo_result,
            'faq': faq_data
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI ASSISTANT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = test_ai_assistant_connection()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    search_results = test_ai_assistant_search()
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    analysis_result = test_ai_assistant_analysis()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    article_data = test_ai_assistant_generation()
    
    # –¢–µ—Å—Ç SEO
    seo_result = test_ai_assistant_seo()
    
    # –¢–µ—Å—Ç FAQ
    faq_data = test_ai_assistant_faq()
    
    # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç ALwrity + AI Assistant
    full_test_result = test_alwrity_with_ai_assistant()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI Assistant: {'‚úÖ OK' if connection_ok else '‚ö†Ô∏è Fallback'}")
    print(f"üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {'‚úÖ OK' if search_results else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {'‚úÖ OK' if analysis_result else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π: {'‚úÖ OK' if article_data else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üîß SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {'‚úÖ OK' if seo_result else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"‚ùì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FAQ: {'‚úÖ OK' if faq_data else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"üîÑ ALwrity + AI Assistant: {'‚úÖ OK' if full_test_result else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if full_test_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ AI Assistant —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ BizFin Pro SEO Pipeline")
        print("ü§ñ ALwrity —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI Assistant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π AI Assistant API")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")

if __name__ == "__main__":
    main()


