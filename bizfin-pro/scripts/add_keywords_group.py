#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö BizFin Pro
"""

import os
import sys
import mysql.connector
from mysql.connector import Error
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.database import DatabaseConfig

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def add_keywords_group():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    logger = setup_logging()
    
    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã "–ì—Ä—É–ø–ø–∞ –∫–ª—é—á–µ–π —á–∞—Å—Ç—å 1"
    keywords_list = [
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
        "—Å—É—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–≤–∏–¥—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —è–≤–ª—è–µ—Ç—Å—è",
        "–ø–æ—Ä—É—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–æ–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Å—Ä–æ–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–¥–µ–π—Å—Ç–≤–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Å—Ä–æ–∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ 44 —Ñ–∑",
        "–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–∑–∞–ª–æ–≥ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ 44 —Ñ–∑",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ 223 —Ñ–∑",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏",
        "–∞–≤–∞–Ω—Å–æ–≤–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é",
        "—Ä–µ–µ—Å—Ç—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
        "—Ä–µ–µ—Å—Ç—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ 44 —Ñ–∑",
        "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Ä–∏—Å–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–≤–æ–∑–≤—Ä–∞—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–æ—Ç–∫–∞–∑ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–±–∞–Ω–∫–∏ –≤—ã–¥–∞—é—â–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ 44 —Ñ–∑",
        "–∞–ª—å—Ñ–∞ –±–∞–Ω–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–±–µ—Ä–±–∞–Ω–∫",
        "—Å–æ–≤–∫–æ–º–±–∞–Ω–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
        "–±–∞–Ω–∫–∏ –º–∏–Ω—Ñ–∏–Ω –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—è–º",
        "–æ—Ñ–æ—Ä–º–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ–Ω–ª–∞–π–Ω",
        "–∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é",
        "–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
        "–≤—ã–¥–∞—á–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –º–æ—Å–∫–≤–∞",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
        "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç"
    ]
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        config = DatabaseConfig.get_config_dict()
        connection = mysql.connector.connect(**config)
        cursor = connection.cursor()
        
        logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords_list)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        cursor.execute("SELECT MAX(id) FROM keywords")
        max_id_result = cursor.fetchone()
        max_id = max_id_result[0] if max_id_result[0] else 0
        
        group_start_id = max_id + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–∏–∫
        added_keywords = []
        for i, keyword in enumerate(keywords_list, 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á–µ–≤–∏–∫
                cursor.execute("SELECT id FROM keywords WHERE keyword = %s", (keyword,))
                existing = cursor.fetchone()
                
                if existing:
                    logger.warning(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {keyword} (ID: {existing[0]})")
                    added_keywords.append({
                        'id': existing[0],
                        'keyword': keyword,
                        'status': 'existing'
                    })
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
                if i <= 10:
                    priority = 'high'
                elif i <= 25:
                    priority = 'medium'
                else:
                    priority = 'low'
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if any(word in keyword.lower() for word in ['—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']):
                    target_intent = 'informational'
                elif any(word in keyword.lower() for word in ['–æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∑–∞—è–≤–∫–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞']):
                    target_intent = 'commercial'
                elif any(word in keyword.lower() for word in ['–≤–∏–¥—ã', '—Ç–∏–ø—ã', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ']):
                    target_intent = 'educational'
                else:
                    target_intent = 'informational'
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–∏–∫
                insert_query = """
                INSERT INTO keywords (
                    keyword, status, source, frequency, user_id, priority, 
                    target_volume, target_intent, created_at, updated_at
                ) VALUES (
                    %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                )
                """
                
                now = datetime.now()
                values = (
                    keyword,
                    'pending',
                    'manual_group',
                    1,
                    1,
                    priority,
                    2500,
                    target_intent,
                    now,
                    now
                )
                
                cursor.execute(insert_query, values)
                keyword_id = cursor.lastrowid
                
                added_keywords.append({
                    'id': keyword_id,
                    'keyword': keyword,
                    'status': 'added',
                    'priority': priority,
                    'intent': target_intent
                })
                
                logger.info(f"‚úÖ {i:2d}/50 - –î–æ–±–∞–≤–ª–µ–Ω: {keyword} (ID: {keyword_id}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
                
            except Error as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–∏–∫–∞ '{keyword}': {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM keywords WHERE source = 'manual_group'")
        total_group_keywords = cursor.fetchone()[0]
        
        cursor.execute("SELECT MIN(id), MAX(id) FROM keywords WHERE source = 'manual_group'")
        id_range = cursor.fetchone()
        
        logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø:")
        logger.info(f"   üìù –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {total_group_keywords}")
        logger.info(f"   üÜî –î–∏–∞–ø–∞–∑–æ–Ω ID: {id_range[0]} - {id_range[1]}")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len([k for k in added_keywords if k['status'] == 'added'])}")
        logger.info(f"   ‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {len([k for k in added_keywords if k['status'] == 'existing'])}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = {
            'group_name': '–ì—Ä—É–ø–ø–∞ –∫–ª—é—á–µ–π —á–∞—Å—Ç—å 1',
            'total_keywords': len(keywords_list),
            'added_keywords': len([k for k in added_keywords if k['status'] == 'added']),
            'existing_keywords': len([k for k in added_keywords if k['status'] == 'existing']),
            'first_id': id_range[0],
            'last_id': id_range[1],
            'source': 'manual_group',
            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        cursor.close()
        connection.close()
        
        return group_info
        
    except Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    print("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ BizFin Pro")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    group_info = add_keywords_group()
    
    if group_info:
        print("\n" + "=" * 60)
        print("üéâ –ì–†–£–ü–ü–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í –î–û–ë–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_info['group_name']}")
        print(f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤–∏–∫–æ–≤: {group_info['total_keywords']}")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {group_info['added_keywords']}")
        print(f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {group_info['existing_keywords']}")
        print(f"üÜî –î–∏–∞–ø–∞–∑–æ–Ω ID: {group_info['first_id']} - {group_info['last_id']}")
        print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group_info['created_at']}")
        print(f"üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: {group_info['source']}")
        print("\nüéØ –ù–û–ú–ï–† –ì–†–£–ü–ü–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        print(f"   –ü–µ—Ä–≤—ã–π ID –≥—Ä—É–ø–ø—ã: {group_info['first_id']}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π ID –≥—Ä—É–ø–ø—ã: {group_info['last_id']}")
        print("=" * 60)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return group_info['first_id']
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        return None

if __name__ == "__main__":
    group_id = main()
    if group_id:
        print(f"\nüéØ –ù–û–ú–ï–† –ì–†–£–ü–ü–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•: {group_id}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã")

