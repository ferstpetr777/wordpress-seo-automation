#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç BizFin Pro SEO Pipeline v2
"""

import sys
import os
import sqlite3
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.database_sqlite import DB_CONFIG
from modules.research.competitor_analyzer import CompetitorAnalyzer

class DemoPipeline:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω"""
    
    def __init__(self):
        self.config = DB_CONFIG.get_config_dict()
        self.db_path = self.config['database']
        self.analyzer = CompetitorAnalyzer(max_competitors=2, delay=0.5)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
    
    def create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS keywords (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL UNIQUE,
                date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending',
                source TEXT DEFAULT 'manual',
                priority TEXT DEFAULT 'medium',
                target_volume INTEGER DEFAULT 2500,
                target_intent TEXT DEFAULT 'informational',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword_id INTEGER NOT NULL,
                sources TEXT,
                structure TEXT,
                gaps TEXT,
                recommendations TEXT,
                competitors_data TEXT,
                lsi_keywords TEXT,
                search_volume INTEGER,
                competition_level TEXT DEFAULT 'medium',
                date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
                analysis_duration INTEGER,
                FOREIGN KEY (keyword_id) REFERENCES keywords(id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword_id INTEGER NOT NULL,
                analysis_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                content_raw TEXT NOT NULL,
                html_raw TEXT NOT NULL,
                word_count INTEGER DEFAULT 0,
                reading_time INTEGER DEFAULT 0,
                structure TEXT,
                lsi_keywords_used TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                generation_duration INTEGER,
                FOREIGN KEY (keyword_id) REFERENCES keywords(id),
                FOREIGN KEY (analysis_id) REFERENCES analysis(id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    
    def add_keyword(self, keyword: str) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: '{keyword}'")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR IGNORE INTO keywords (keyword, status, priority, target_volume)
            VALUES (?, ?, ?, ?)
        ''', (keyword, 'pending', 'medium', 2500))
        
        keyword_id = cursor.lastrowid
        if keyword_id == 0:
            cursor.execute('SELECT id FROM keywords WHERE keyword = ?', (keyword,))
            keyword_id = cursor.fetchone()[0]
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (ID: {keyword_id})")
        return keyword_id
    
    def analyze_competitors(self, keyword_id: int, keyword: str) -> int:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è: '{keyword}'")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ (—Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        mock_analysis = {
            'keyword': keyword,
            'competitors': [
                {
                    'url': 'https://example-bank1.ru',
                    'title': f'{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                    'meta_description': f'–ü–æ–ª—É—á–∏—Ç–µ {keyword} –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ',
                    'h1': f'–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}',
                    'word_count': 2800,
                    'reading_time': 14,
                    'images_count': 8,
                    'faq_count': 6,
                    'cta_count': 4,
                    'lsi_keywords': ['–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±–∏–∑–Ω–µ—Å'],
                    'structure': {'h1': 1, 'h2': 8, 'h3': 15},
                    'domain': 'example-bank1.ru'
                },
                {
                    'url': 'https://example-bank2.ru',
                    'title': f'{keyword}: –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å',
                    'meta_description': f'–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ {keyword}',
                    'h1': f'–í–∏–¥—ã {keyword}',
                    'word_count': 2200,
                    'reading_time': 11,
                    'images_count': 5,
                    'faq_count': 4,
                    'cta_count': 3,
                    'lsi_keywords': ['–≥–∞—Ä–∞–Ω—Ç–∏—è', '–∑–∞–ª–æ–≥', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Å—Ä–æ–∫–∏'],
                    'structure': {'h1': 1, 'h2': 6, 'h3': 12},
                    'domain': 'example-bank2.ru'
                }
            ],
            'statistics': {
                'avg_word_count': 2500,
                'avg_reading_time': 12,
                'avg_images': 6,
                'avg_faq': 5,
                'avg_cta': 3,
                'total_competitors': 2
            },
            'lsi_keywords': ['–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–∑–∞–ª–æ–≥', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±–∏–∑–Ω–µ—Å', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Å—Ä–æ–∫–∏'],
            'gaps': ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤', '–°–ª–∞–±—ã–µ CTA'],
            'recommendations': [
                '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
                '–£–ª—É—á—à–∏—Ç—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
                '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ FAQ',
                '–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
            ],
            'status': 'completed'
        }
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO analysis (keyword_id, sources, structure, gaps, recommendations,
                                competitors_data, lsi_keywords, search_volume, analysis_duration)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            keyword_id,
            json.dumps([c['url'] for c in mock_analysis['competitors']]),
            json.dumps(mock_analysis['statistics']),
            json.dumps(mock_analysis['gaps']),
            json.dumps(mock_analysis['recommendations']),
            json.dumps(mock_analysis['competitors']),
            json.dumps(mock_analysis['lsi_keywords']),
            mock_analysis['statistics']['avg_word_count'],
            45
        ))
        
        analysis_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (ID: {analysis_id})")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {len(mock_analysis['competitors'])}")
        print(f"   üîë LSI –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(mock_analysis['lsi_keywords'][:5])}")
        print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–µ–ª—ã: {', '.join(mock_analysis['gaps'])}")
        
        return analysis_id
    
    def generate_article(self, analysis_id: int, keyword: str) -> int:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏"""
        print(f"‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –¥–ª—è: '{keyword}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        title = f"{keyword}: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ 2024 –≥–æ–¥—É"
        
        content_raw = f"""
# {title}

## –í–≤–µ–¥–µ–Ω–∏–µ

{keyword} ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –í –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è {keyword} –≤ 2024 –≥–æ–¥—É, –≤–∫–ª—é—á–∞—è –≤–∏–¥—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã.

## –ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}

{keyword} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–∞–Ω–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑—á–∏–∫–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞. –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –±–∏–∑–Ω–µ—Å–∞.

### –ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

- **–†–∞–∑–º–µ—Ä:** –æ—Ç 0,5% –¥–æ 30% –æ—Ç —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
- **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** –æ—Ç 1 –º–µ—Å—è—Ü–∞ –¥–æ 3 –ª–µ—Ç
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ:** –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
- **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã:** –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è

## –í–∏–¥—ã {keyword}

### 1. –¢–µ–Ω–¥–µ—Ä–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.

### 2. –ì–∞—Ä–∞–Ω—Ç–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞.

### 3. –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–≤–∞–Ω—Å–∞
–ó–∞—â–∏—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –∞–≤–∞–Ω—Å–∞.

## –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ä–∞—Å—á–µ—Ç {keyword}

–°—Ç–æ–∏–º–æ—Å—Ç—å {keyword} –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:

- –†–∞–∑–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–∏
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
- –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
- –ù–∞–ª–∏—á–∏–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
- –ë–∞–Ω–∫-–≥–∞—Ä–∞–Ω—Ç

**–¢–∏–ø–∏—á–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 1,5-3% –≤ –≥–æ–¥
- –°–ª–æ–∂–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 3-5% –≤ –≥–æ–¥
- –°—Ä–æ—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏: +0,5-1% –∫ –±–∞–∑–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É

## –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}

### –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
- –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã–¥–∞—á—É –≥–∞—Ä–∞–Ω—Ç–∏–∏
- –£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ 2 –≥–æ–¥–∞
- –°–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
- –î–æ–≥–æ–≤–æ—Ä, –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è
- –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –∏–ª–∏ –¢–≠–û
- –î–æ–∫—É–º–µ–Ω—Ç—ã –æ –∑–∞–ª–æ–≥–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤

| –ë–∞–Ω–∫ | –ö–æ–º–∏—Å—Å–∏—è | –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è | –ú–∏–Ω. —Å—É–º–º–∞ | –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ |
|------|----------|-------------------|------------|-------------|
| –°–±–µ—Ä–±–∞–Ω–∫ | 2,0-3,5% | 3-5 –¥–Ω–µ–π | 100 000 ‚ÇΩ | –®–∏—Ä–æ–∫–∞—è —Å–µ—Ç—å |
| –í–¢–ë | 1,8-3,2% | 2-4 –¥–Ω—è | 50 000 ‚ÇΩ | –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ |
| –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ | 2,5-4,0% | 3-6 –¥–Ω–µ–π | 100 000 ‚ÇΩ | –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ |

## –†–µ–∞–ª—å–Ω—ã–π –∫–µ–π—Å —É—Å–ø–µ—Ö–∞

–ö–æ–º–ø–∞–Ω–∏—è "–¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π" –ø–æ–ª—É—á–∏–ª–∞ —Ç–µ–Ω–¥–µ—Ä–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ 50 –º–ª–Ω —Ä—É–±–ª–µ–π –∑–∞ 3 –¥–Ω—è –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –∏–º –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±–æ—Ä–æ—Ç –Ω–∞ 200%.

## –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

### –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å {keyword}?
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏: 3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –≠–∫—Å–ø—Ä–µ—Å—Å-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞ 1-2 –¥–Ω—è.

### –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword}?
–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 1,5% –¥–æ 5% –æ—Ç —Å—É–º–º—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤ –≥–æ–¥.

### –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}?
–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç —É—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.

### –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å {keyword} –±–µ–∑ –∑–∞–ª–æ–≥–∞?
–î–∞, –º–Ω–æ–≥–∏–µ –±–∞–Ω–∫–∏ –≤—ã–¥–∞—é—Ç –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

### –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –±–∞–Ω–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –≤—ã–¥–∞—á–µ {keyword}?
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏ –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

{keyword} ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—Ä—É–ø–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –∏ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.

**–ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å {keyword}? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏!**

üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (499) 757-01-25
üìß **Email:** info@bizfin-pro.ru
üåê **–°–∞–π—Ç:** https://bizfin-pro.ru
        """.strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –≤–µ—Ä—Å–∏—é
        html_raw = f"""
        <article class="bizfin-article">
            <header class="article-header">
                <h1>{title}</h1>
                <p class="article-meta">–ü–æ–ª—É—á–∏—Ç–µ {keyword} –±—ã—Å—Ç—Ä–æ –∏ –≤—ã–≥–æ–¥–Ω–æ! –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –±–∞–Ω–∫–æ–≤ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏.</p>
            </header>
            
            <div class="article-content">
                {content_raw.replace('#', '<h2>').replace('##', '</h2><h3>').replace('###', '</h3><h4>')}
            </div>
            
            <footer class="article-footer">
                <div class="cta-section">
                    <h3>üöÄ –ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å {keyword}?</h3>
                    <p>–ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è, –¥–µ–Ω—å–≥–∏ –∏ –Ω–µ—Ä–≤—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {keyword}</p>
                    <button class="cta-button">üìû –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</button>
                </div>
            </footer>
        </article>
        """
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞
        word_count = len(content_raw.split())
        reading_time = max(1, word_count // 200)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º keyword_id –∏–∑ analysis
        cursor.execute('SELECT keyword_id FROM analysis WHERE id = ?', (analysis_id,))
        keyword_id = cursor.fetchone()[0]
        
        cursor.execute('''
            INSERT INTO articles (keyword_id, analysis_id, title, content_raw, html_raw,
                                word_count, reading_time, structure, lsi_keywords_used, generation_duration)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            keyword_id,
            analysis_id,
            title,
            content_raw,
            html_raw,
            word_count,
            reading_time,
            json.dumps({'sections': ['–í–≤–µ–¥–µ–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 'FAQ', '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ']}),
            json.dumps(['–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±–∏–∑–Ω–µ—Å']),
            120
        ))
        
        article_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (ID: {article_id})")
        print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        print(f"   üìä –°–ª–æ–≤: {word_count}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {reading_time} –º–∏–Ω—É—Ç")
        
        return article_id
    
    def show_results(self, keyword_id: int):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("=" * 50)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            SELECT 
                k.keyword,
                k.status,
                k.target_volume,
                a.competitors_data,
                a.lsi_keywords,
                a.gaps,
                a.recommendations,
                ar.title,
                ar.word_count,
                ar.reading_time
            FROM keywords k
            LEFT JOIN analysis a ON k.id = a.keyword_id
            LEFT JOIN articles ar ON a.id = ar.analysis_id
            WHERE k.id = ?
        ''', (keyword_id,))
        
        result = cursor.fetchone()
        if result:
            keyword, status, target_volume, competitors_data, lsi_keywords, gaps, recommendations, title, word_count, reading_time = result
            
            print(f"üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
            print(f"üìà –°—Ç–∞—Ç—É—Å: {status}")
            print(f"üéØ –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º: {target_volume} —Å–ª–æ–≤")
            
            if competitors_data:
                competitors = json.loads(competitors_data)
                print(f"üèÜ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {len(competitors)}")
                
                if lsi_keywords:
                    lsi = json.loads(lsi_keywords)
                    print(f"üîë LSI –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(lsi[:5])}")
                
                if gaps:
                    gaps_list = json.loads(gaps)
                    print(f"‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã: {', '.join(gaps_list)}")
                
                if recommendations:
                    recs = json.loads(recommendations)
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(recs[:3])}")
            
            if title:
                print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏: {title}")
                print(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º: {word_count} —Å–ª–æ–≤")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {reading_time} –º–∏–Ω—É—Ç")
        
        conn.close()
    
    def run_demo(self, keyword: str):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print(f"üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø BIZFIN PRO SEO PIPELINE V2")
        print(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
        print("=" * 60)
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.create_database()
        
        # –≠—Ç–∞–ø 0: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        keyword_id = self.add_keyword(keyword)
        
        # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        analysis_id = self.analyze_competitors(keyword_id, keyword)
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
        article_id = self.generate_article(analysis_id, keyword)
        
        execution_time = time.time() - start_time
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.show_results(keyword_id)
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        keyword = sys.argv[1]
    else:
        keyword = "—Ç–µ–Ω–¥–µ—Ä–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è"
    
    demo = DemoPipeline()
    demo.run_demo(keyword)

if __name__ == "__main__":
    main()


