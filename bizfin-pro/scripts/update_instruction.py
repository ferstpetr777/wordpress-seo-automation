#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ web_research_standard_2025 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import sqlite3
import json
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def update_instruction_in_db():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger = setup_logging()
    
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        db_path = os.path.join(os.path.dirname(__file__), '..', 'db', 'bizfin_pro.db')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS research_instructions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                instruction_id TEXT UNIQUE NOT NULL,
                title TEXT NOT NULL,
                version TEXT NOT NULL,
                instruction_data TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'active'
            )
        ''')
        
        # –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
        json_file_path = os.path.join(os.path.dirname(__file__), '..', 'web_research_instruction_standard.json')
        
        if not os.path.exists(json_file_path):
            logger.error(f"‚ùå –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file_path}")
            return False
        
        with open(json_file_path, 'r', encoding='utf-8') as f:
            instruction_data = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        instruction_data['version'] = '1.1'
        instruction_data['updated_at'] = datetime.now().isoformat()
        
        logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {instruction_data['title']}")
        logger.info(f"üÜî ID: {instruction_data['id']}")
        logger.info(f"üìä –í–µ—Ä—Å–∏—è: {instruction_data['version']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        secondary_searches = instruction_data.get('web_search_strategy', {}).get('secondary_searches', [])
        logger.info(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(secondary_searches)}")
        
        for i, search in enumerate(secondary_searches, 1):
            logger.info(f"   {i}. {search['query']} - {search['purpose']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –ë–î
        insert_query = '''
            INSERT OR REPLACE INTO research_instructions 
            (instruction_id, title, version, instruction_data, updated_at)
            VALUES (?, ?, ?, ?, ?)
        '''
        
        values = (
            instruction_data["id"],
            instruction_data["title"],
            instruction_data["version"],
            json.dumps(instruction_data, ensure_ascii=False),
            datetime.now().isoformat()
        )
        
        cursor.execute(insert_query, values)
        instruction_db_id = cursor.lastrowid
        
        connection.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        cursor.execute("SELECT id, instruction_id, version FROM research_instructions WHERE instruction_id = ?", 
                      (instruction_data["id"],))
        result = cursor.fetchone()
        
        if result:
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î:")
            logger.info(f"   üÜî ID –≤ –ë–î: {result[0]}")
            logger.info(f"   üìã Instruction ID: {result[1]}")
            logger.info(f"   üìä –í–µ—Ä—Å–∏—è: {result[2]}")
        else:
            logger.error("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        cursor.close()
        connection.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
        if 'connection' in locals():
            connection.rollback()
            connection.close()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ web_research_standard_2025")
    print("=" * 60)
    
    if update_instruction_in_db():
        print("\n" + "=" * 60)
        print("üéâ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê!")
        print("=" * 60)
        print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ —Å 4 –Ω–∞ 3")
        print("‚úÖ –£–±—Ä–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ site:{brand_domain}")
        print("‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ 1.1")
        print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("\nüîç –¢–ï–ö–£–©–ò–ï –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´:")
        print("   1. {keyword} —É—Å–ª–æ–≤–∏—è —Ç–∞—Ä–∏—Ñ—ã")
        print("   2. {keyword} –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è") 
        print("   3. {keyword} –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç—å {year}")
        print("=" * 60)
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

if __name__ == "__main__":
    main()

