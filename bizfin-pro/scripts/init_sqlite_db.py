#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö BizFin Pro
"""

import os
import sys
import sqlite3
import logging
from datetime import datetime

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    return logging.getLogger(__name__)

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQLite"""
    logger = setup_logging()
    
    try:
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        db_path = os.path.join(os.path.dirname(__file__), '..', 'db', 'bizfin_pro.db')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã keywords (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è SQLite)
        create_keywords_table = """
        CREATE TABLE IF NOT EXISTS keywords (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            keyword TEXT NOT NULL UNIQUE,
            date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'analyzing', 'generating', 'published', 'error')),
            source TEXT DEFAULT 'manual',
            frequency INTEGER DEFAULT 1,
            user_id INTEGER DEFAULT 1,
            priority TEXT DEFAULT 'medium' CHECK(priority IN ('low', 'medium', 'high', 'urgent')),
            target_volume INTEGER DEFAULT 2500,
            target_intent TEXT DEFAULT 'informational' CHECK(target_intent IN ('informational', 'commercial', 'educational', 'faq', 'review')),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã analysis
        create_analysis_table = """
        CREATE TABLE IF NOT EXISTS analysis (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            keyword_id INTEGER NOT NULL,
            sources TEXT, -- JSON –∫–∞–∫ TEXT
            structure TEXT, -- JSON –∫–∞–∫ TEXT
            gaps TEXT, -- JSON –∫–∞–∫ TEXT
            recommendations TEXT, -- JSON –∫–∞–∫ TEXT
            competitors_data TEXT, -- JSON –∫–∞–∫ TEXT
            lsi_keywords TEXT, -- JSON –∫–∞–∫ TEXT
            search_volume INTEGER,
            competition_level TEXT DEFAULT 'medium' CHECK(competition_level IN ('low', 'medium', 'high')),
            date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
            analysis_duration INTEGER,
            FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã articles
        create_articles_table = """
        CREATE TABLE IF NOT EXISTS articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            keyword_id INTEGER NOT NULL,
            analysis_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            content_raw TEXT NOT NULL,
            html_raw TEXT NOT NULL,
            word_count INTEGER DEFAULT 0,
            reading_time INTEGER DEFAULT 0,
            structure TEXT, -- JSON –∫–∞–∫ TEXT
            lsi_keywords_used TEXT, -- JSON –∫–∞–∫ TEXT
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            generation_duration INTEGER,
            FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE,
            FOREIGN KEY (analysis_id) REFERENCES analysis(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã seo_checks
        create_seo_checks_table = """
        CREATE TABLE IF NOT EXISTS seo_checks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            article_id INTEGER NOT NULL,
            keyword_id INTEGER NOT NULL,
            seo_score INTEGER DEFAULT 0,
            issues TEXT, -- JSON –∫–∞–∫ TEXT
            recommendations TEXT, -- JSON –∫–∞–∫ TEXT
            focus_keyword_present BOOLEAN DEFAULT FALSE,
            meta_description_length INTEGER DEFAULT 0,
            title_length INTEGER DEFAULT 0,
            h1_present BOOLEAN DEFAULT FALSE,
            internal_links_count INTEGER DEFAULT 0,
            external_links_count INTEGER DEFAULT 0,
            images_alt_count INTEGER DEFAULT 0,
            readability_score INTEGER DEFAULT 0,
            date_checked DATETIME DEFAULT CURRENT_TIMESTAMP,
            check_duration INTEGER,
            FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
            FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã articles_final
        create_articles_final_table = """
        CREATE TABLE IF NOT EXISTS articles_final (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            article_id INTEGER NOT NULL,
            seo_check_id INTEGER NOT NULL,
            content_final TEXT NOT NULL,
            html_final TEXT NOT NULL,
            json_ld TEXT, -- JSON –∫–∞–∫ TEXT
            meta_title TEXT NOT NULL,
            meta_description TEXT NOT NULL,
            focus_keyword TEXT NOT NULL,
            slug TEXT NOT NULL,
            canonical_url TEXT,
            internal_links TEXT, -- JSON –∫–∞–∫ TEXT
            external_links TEXT, -- JSON –∫–∞–∫ TEXT
            images_data TEXT, -- JSON –∫–∞–∫ TEXT
            faq_schema TEXT, -- JSON –∫–∞–∫ TEXT
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            improvement_duration INTEGER,
            FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
            FOREIGN KEY (seo_check_id) REFERENCES seo_checks(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã publish_queue
        create_publish_queue_table = """
        CREATE TABLE IF NOT EXISTS publish_queue (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            article_final_id INTEGER NOT NULL,
            eec_json TEXT NOT NULL, -- JSON –∫–∞–∫ TEXT
            status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'processing', 'published', 'failed')),
            priority TEXT DEFAULT 'medium' CHECK(priority IN ('low', 'medium', 'high', 'urgent')),
            retry_count INTEGER DEFAULT 0,
            max_retries INTEGER DEFAULT 3,
            error_message TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            scheduled_at DATETIME,
            FOREIGN KEY (article_final_id) REFERENCES articles_final(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã published
        create_published_table = """
        CREATE TABLE IF NOT EXISTS published (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            publish_queue_id INTEGER NOT NULL,
            wp_post_id INTEGER NOT NULL,
            permalink TEXT NOT NULL,
            response_code INTEGER,
            response_data TEXT, -- JSON –∫–∞–∫ TEXT
            publish_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            publish_duration INTEGER,
            FOREIGN KEY (publish_queue_id) REFERENCES publish_queue(id) ON DELETE CASCADE
        );
        """
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã publish_status
        create_publish_status_table = """
        CREATE TABLE IF NOT EXISTS publish_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            published_id INTEGER NOT NULL,
            keyword_id INTEGER NOT NULL,
            article_id INTEGER NOT NULL,
            seo_check_id INTEGER NOT NULL,
            article_final_id INTEGER NOT NULL,
            status TEXT DEFAULT 'success' CHECK(status IN ('success', 'failed', 'partial')),
            url TEXT,
            http_code INTEGER,
            response_time INTEGER,
            checked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (published_id) REFERENCES published(id) ON DELETE CASCADE,
            FOREIGN KEY (keyword_id) REFERENCES keywords(id) ON DELETE CASCADE,
            FOREIGN KEY (article_id) REFERENCES articles(id) ON DELETE CASCADE,
            FOREIGN KEY (seo_check_id) REFERENCES seo_checks(id) ON DELETE CASCADE,
            FOREIGN KEY (article_final_id) REFERENCES articles_final(id) ON DELETE CASCADE
        );
        """
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = [
            ("keywords", create_keywords_table),
            ("analysis", create_analysis_table),
            ("articles", create_articles_table),
            ("seo_checks", create_seo_checks_table),
            ("articles_final", create_articles_final_table),
            ("publish_queue", create_publish_queue_table),
            ("published", create_published_table),
            ("publish_status", create_publish_status_table)
        ]
        
        for table_name, create_sql in tables:
            try:
                cursor.execute(create_sql)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_keywords_status ON keywords(status);",
            "CREATE INDEX IF NOT EXISTS idx_keywords_priority ON keywords(priority);",
            "CREATE INDEX IF NOT EXISTS idx_keywords_date_added ON keywords(date_added);",
            "CREATE INDEX IF NOT EXISTS idx_analysis_keyword_id ON analysis(keyword_id);",
            "CREATE INDEX IF NOT EXISTS idx_articles_keyword_id ON articles(keyword_id);",
            "CREATE INDEX IF NOT EXISTS idx_seo_checks_article_id ON seo_checks(article_id);",
            "CREATE INDEX IF NOT EXISTS idx_seo_checks_seo_score ON seo_checks(seo_score);"
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        logger.info(f"\nüìä –°–û–ó–î–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
        for table in tables:
            logger.info(f"   üìã {table[0]}")
        
        cursor.close()
        connection.close()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = setup_logging()
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö BizFin Pro")
    print("=" * 60)
    
    if create_tables():
        print("\n" + "=" * 60)
        print("üéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()

