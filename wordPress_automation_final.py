#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è WordPress Automation Script
- –†–µ–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π
- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –ø–æ —á–∞—Å—Ç—è–º (–º–∏–Ω–∏–º—É–º 2000 —Å–ª–æ–≤)
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import sqlite3
import re
from datetime import datetime
import time

class WordPressAutomationFinal:
    def __init__(self):
        self.wp_url = "https://bizfin-pro.ru/wp-json/wp/v2"
        self.wp_username = "bizfin_pro_r"
        self.wp_app_password = "U3Ep gU2T clRu FcwN QU6l Dsda"
        self.wp_auth = (self.wp_username, self.wp_app_password)
        self.db_path = "wordpress_articles_final.db"
        self.conn = None
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.keywords = [
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ 44 —Ñ–∑ –æ–Ω–ª–∞–π–Ω",
            "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ 5 000 000 –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–ø–∏—Å–æ–∫ 44-—Ñ–∑",
            "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∫–∞–∫",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç –∞–≤–∞–Ω—Å–∞ –æ–±—Ä–∞–∑–µ—Ü —Ç–µ–∫—Å—Ç–∞",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑ –∑–∞–ª–æ–≥–∞ –¥–ª—è –ò–ü",
            "—Å—Ä–æ—á–Ω–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—Ç—å –¥–æ ‚Ä¶ (–¥–∞—Ç–∞)",
            "–∫–∞–∫–æ–π –±–∞–Ω–∫ –≤—ã–¥–∞—ë—Ç –±–≥ –¥–µ—à–µ–≤–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏/–ø–æ—Å—Ç–∞–≤–∫–∏/—É—Å–ª—É–≥",
            "–æ—Ñ–æ—Ä–º–∏—Ç—å –±–≥ –º–æ—Å–∫–≤–∞/—Å–ø–±/–∏—Ä–∫—É—Ç—Å–∫"
        ]
        
        self.initialize_db()
    
    def initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect(self.db_path)
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS keyword_research (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                search_volume TEXT,
                competition_level TEXT,
                user_intent TEXT,
                popular_questions TEXT,
                target_audience TEXT,
                region TEXT,
                industry_context TEXT,
                pain_points TEXT,
                solutions TEXT,
                statistical_data TEXT,
                trends_tendencies TEXT,
                key_facts_figures TEXT,
                expert_opinions TEXT,
                case_studies TEXT,
                research_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS article_outlines (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                outline_data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                wp_post_id INTEGER,
                wp_post_url TEXT,
                status TEXT DEFAULT 'draft',
                word_count INTEGER DEFAULT 0,
                quality_score INTEGER DEFAULT 0,
                seo_score INTEGER DEFAULT 0,
                content_rating INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quality_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                article_id INTEGER,
                metric_type TEXT,
                score INTEGER,
                details TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def research_keyword(self, keyword):
        """–†–µ–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        print(f"   üîç –†–µ–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}")
        
        try:
            # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent_analysis = self.analyze_user_intent(keyword)
            
            research_data = {
                "search_volume": self.estimate_search_volume(keyword),
                "competition_level": self.analyze_competition(keyword),
                "user_intent": intent_analysis,
                "popular_questions": self.generate_real_questions(keyword, intent_analysis),
                "target_audience": self.determine_target_audience(keyword),
                "region": self.determine_region(keyword),
                "industry_context": self.determine_industry(keyword),
                "pain_points": self.identify_real_pain_points(keyword, intent_analysis),
                "solutions": self.generate_targeted_solutions(keyword, intent_analysis),
                "thematic_areas": self.identify_thematic_areas(keyword, intent_analysis),
                "unique_aspects": self.find_unique_aspects(keyword, intent_analysis),
                "statistical_data": self.collect_real_statistical_data(keyword),
                "trends_tendencies": self.analyze_real_trends(keyword),
                "key_facts_figures": self.extract_real_facts(keyword),
                "expert_opinions": self.gather_real_expert_opinions(keyword),
                "case_studies": self.find_real_case_studies(keyword, intent_analysis)
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.save_research_to_db(keyword, research_data)
            
            print(f"   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            print(f"   üìö –ù–∞–π–¥–µ–Ω–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(research_data['thematic_areas'])}")
            print(f"   ‚ùì –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(research_data['popular_questions'])}")
            print(f"   üéØ –ü—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(research_data['pain_points'])}")
            print(f"   üí° –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤: {len(research_data['unique_aspects'])}")
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(research_data['statistical_data'])}")
            print(f"   üìà –¢—Ä–µ–Ω–¥–æ–≤ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π: {len(research_data['trends_tendencies'])}")
            print(f"   üî¢ –ö–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤: {len(research_data['key_facts_figures'])}")
            print(f"   üë®‚Äçüíº –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –º–Ω–µ–Ω–∏–π: {len(research_data['expert_opinions'])}")
            print(f"   üìã –ö–µ–π—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(research_data['case_studies'])}")
            
            return research_data
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
            return self.get_fallback_research(keyword)
    
    def save_research_to_db(self, keyword, research_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            INSERT INTO keyword_research (
                keyword, search_volume, competition_level, user_intent,
                popular_questions, target_audience, region, industry_context,
                pain_points, solutions, statistical_data, trends_tendencies,
                key_facts_figures, expert_opinions, case_studies, research_data
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            keyword,
            research_data['search_volume'],
            research_data['competition_level'],
            json.dumps(research_data['user_intent'], ensure_ascii=False),
            json.dumps(research_data['popular_questions'], ensure_ascii=False),
            research_data['target_audience'],
            research_data['region'],
            research_data['industry_context'],
            json.dumps(research_data['pain_points'], ensure_ascii=False),
            json.dumps(research_data['solutions'], ensure_ascii=False),
            json.dumps(research_data['statistical_data'], ensure_ascii=False),
            json.dumps(research_data['trends_tendencies'], ensure_ascii=False),
            json.dumps(research_data['key_facts_figures'], ensure_ascii=False),
            json.dumps(research_data['expert_opinions'], ensure_ascii=False),
            json.dumps(research_data['case_studies'], ensure_ascii=False),
            json.dumps(research_data, ensure_ascii=False)
        ))
        
        self.conn.commit()
    
    def create_article_outline(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        print(f"   üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –¥–ª—è: {keyword}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intent = research_data.get('user_intent', {})
        intent_type = intent.get('primary_intent', 'informational')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        title = self.generate_adaptive_title(keyword, intent_type)
        
        outline = {
            "title": title,
            "sections": []
        }
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        outline["sections"] = self.generate_adaptive_sections(keyword, research_data, intent_type)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
        self.save_outline_to_db(keyword, outline)
        
        total_words = sum(section["word_count"] for section in outline["sections"])
        print(f"   üìä –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏: {total_words} —Å–ª–æ–≤")
        print(f"   üìã –†–∞–∑–¥–µ–ª–æ–≤ –≤ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–∏: {len(outline['sections'])}")
        
        return outline
    
    def save_outline_to_db(self, keyword, outline):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            INSERT INTO article_outlines (keyword, outline_data)
            VALUES (?, ?)
        ''', (keyword, json.dumps(outline, ensure_ascii=False)))
        
        self.conn.commit()
    
    def generate_article_content(self, keyword, research_data, outline):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ —á–∞—Å—Ç—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è —Å —É–º–Ω—ã–º –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ–º"""
        print(f"   ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è: {keyword}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        intro = self.create_unique_introduction(keyword, research_data, outline)
        
        content = f"""<h1 class="entry-title">{outline['title']}</h1>

{intro}

<!-- wp:more -->

"""
        
        total_words = 0
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        for i, section in enumerate(outline["sections"], 1):
            section_content = self.generate_section_content(
                keyword, research_data, section, i
            )
            content += section_content
            total_words += section["word_count"]
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        conclusion = self.create_unique_conclusion(keyword, research_data)
        content += conclusion
        
        # –£–º–Ω–æ–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        content = self.smart_rewrite_content(content, keyword, research_data)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        quality_score = self.evaluate_content_quality(content, keyword)
        seo_score = self.evaluate_seo_quality(content, keyword)
        
        print(f"   üìÑ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏: {len(content.split())} —Å–ª–æ–≤")
        print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {quality_score}/100")
        print(f"   üîç –û—Ü–µ–Ω–∫–∞ SEO: {seo_score}/100")
        print(f"   ‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ {len(outline['sections'])} —Ä–∞–∑–¥–µ–ª–∞–º")
        
        return content, quality_score, seo_score
    
    def generate_section_content(self, keyword, research_data, section, section_num):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞"""
        section_title = section["title"]
        word_count = section["word_count"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if section_num <= 2:
            header_tag = "h2"
            header_class = "section-title"
        else:
            header_tag = "h3"
            header_class = "subsection-title"
        
        content = f"""<{header_tag} class="{header_class}">{section_title}</{header_tag}>

"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        content += self.generate_unique_section_content(
            keyword, research_data, section_title, section_num, word_count
        )
        
        return content + "\n\n"
    
    def generate_unique_section_content(self, keyword, research_data, section_title, section_num, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        
        # –ë–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        if section_num == 1:  # –ü–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            return self.create_definition_with_stats(keyword, research_data)
        elif section_num == 2:  # –í—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ñ–∞–∫—Ç—ã
            return self.create_statistics_section(keyword, research_data)
        elif section_num == 3:  # –¢—Ä–µ—Ç–∏–π —Ä–∞–∑–¥–µ–ª - —Ç—Ä–µ–Ω–¥—ã
            return self.create_trends_section(keyword, research_data)
        elif section_num == 4:  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä–∞–∑–¥–µ–ª - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è
            return self.create_expert_section(keyword, research_data)
        elif section_num == 5:  # –ü—è—Ç—ã–π —Ä–∞–∑–¥–µ–ª - –∫–µ–π—Å—ã
            return self.create_case_studies_section(keyword, research_data)
        elif section_num == 6:  # –®–µ—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
            return self.create_practical_tips_section(keyword, research_data)
        elif section_num == 7:  # –°–µ–¥—å–º–æ–π —Ä–∞–∑–¥–µ–ª - FAQ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
            return self.create_unique_faq_section(keyword, research_data)
        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            return self.create_additional_content_section(keyword, research_data, section_title)
    
    def create_definition_with_stats(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats = research_data.get('statistical_data', [])
        facts = research_data.get('key_facts_figures', [])
        intent = research_data.get('user_intent', {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context_intro = self.get_contextual_introduction(keyword, intent)
        
        content = f"""<p>{context_intro}</p>

<p>–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–∫—Ç–∏–∫–∏, {keyword.lower()} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.</p>

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats:
            content += f"""<p>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:</p>

<ul>
"""
            for stat in stats[:4]:
                content += f"<li>{stat}</li>\n"
            content += "</ul>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã
        if facts:
            content += f"""<p>–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å:</p>

<ul>
"""
            for fact in facts[:3]:
                content += f"<li>{fact}</li>\n"
            content += "</ul>\n\n"
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        characteristics = self.generate_unique_characteristics(keyword, research_data)
        content += f"""<p>–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {keyword.lower()}:</p>

{characteristics}

<p>–ú–µ—Ö–∞–Ω–∏–∑–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–¥–µ–ª–∫–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.</p>

"""
        
        return content
    
    def get_contextual_introduction(self, keyword, intent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        intent_type = intent.get('primary_intent', 'informational')
        
        if intent_type == 'transactional':
            return f"–ü—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ {keyword.lower()} —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –µ–≥–æ –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        elif intent_type == 'navigational':
            return f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {keyword.lower()}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."
        else:
            return f"–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–µ–ª–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ {keyword.lower()} –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å–æ–±–æ–µ –º–µ—Å—Ç–æ –∫–∞–∫ –º–µ—Ö–∞–Ω–∏–∑–º –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫."
    
    def generate_unique_characteristics(self, keyword, research_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        pain_points = research_data.get('pain_points', [])
        solutions = research_data.get('solutions', [])
        
        characteristics = """<ul>
"""
        
        # –°–æ–∑–¥–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π
        if pain_points and solutions:
            for i, (pain, solution) in enumerate(zip(pain_points[:3], solutions[:3])):
                characteristics += f"""<li><strong>–ê—Å–ø–µ–∫—Ç {i+1}:</strong> {pain[:100]}... –†–µ—à–µ–Ω–∏–µ: {solution[:80]}...</li>
"""
        else:
            # Fallback —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics += """<li><strong>–ü—Ä–∞–≤–æ–≤–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 44-–§–ó –∏ –ì–ö –†–§</li>
<li><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è</li>
<li><strong>–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</li>
"""
        
        characteristics += "</ul>"
        return characteristics
    
    def create_unique_introduction(self, keyword, research_data, outline):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        intent = research_data.get('user_intent', {})
        questions = research_data.get('popular_questions', [])
        pain_points = research_data.get('pain_points', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≤–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_type = intent.get('primary_intent', 'informational')
        
        if intent_type == 'transactional':
            intro = f"""<p>–í —É—Å–ª–æ–≤–∏—è—Ö –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–µ–≥–æ—Å—è —Ä—ã–Ω–∫–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫, {keyword.lower()} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤.</p>

<p>–î–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–∞—Ö –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {keyword.lower()}, –∏–∑–±–µ–∂–∞–≤ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–≤ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏.</p>"""
        
        elif intent_type == 'navigational':
            intro = f"""<p>–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {keyword.lower()} —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</p>

<p>–í —ç—Ç–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ —Å–æ–±—Ä–∞–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {keyword.lower()}, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.</p>"""
        
        else:
            intro = f"""<p>–í–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å {keyword.lower()}, —è–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–∏–º–∏ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤ —Å—Ñ–µ—Ä–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫.</p>

<p>–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ {keyword.lower()}, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ.</p>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if questions:
            intro += f"""

<p>–í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</p>

<ul>
"""
            for question in questions[:3]:
                intro += f"<li>{question}</li>\n"
            intro += "</ul>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–∞–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if pain_points:
            intro += f"""

<p>–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏—é —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:</p>

<ul>
"""
            for pain in pain_points[:2]:
                intro += f"<li>{pain}</li>\n"
            intro += "</ul>"
        
        intro += """

<p>–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º.</p>"""
        
        return intro
    
    def create_unique_conclusion(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        intent = research_data.get('user_intent', {})
        solutions = research_data.get('solutions', [])
        trends = research_data.get('trends_tendencies', [])
        
        intent_type = intent.get('primary_intent', 'informational')
        
        conclusion = f"""<h2 class="section-title">–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è</h2>

"""
        
        if intent_type == 'transactional':
            conclusion += f"""<p>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {keyword.lower()} —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞ –≤ —É—á–∞—Å—Ç–∏–∏ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö.</p>

<p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä—ã–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –≤–ª–∞–¥–µ—é—â–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ö–∞–Ω–∏–∑–º–∞—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, –∏–º–µ—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.</p>"""
        
        else:
            conclusion += f"""<p>–ò–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ {keyword.lower()} –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä—ã–Ω–∫–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏.</p>

<p>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫.</p>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if trends:
            conclusion += f"""

<p>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏:</p>

<ul>
"""
            for trend in trends[:3]:
                conclusion += f"<li>{trend}</li>\n"
            conclusion += "</ul>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if solutions:
            conclusion += f"""

<p>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞:</p>

<ul>
"""
            for solution in solutions[:3]:
                conclusion += f"<li>{solution}</li>\n"
            conclusion += "</ul>"
        
        conclusion += f"""

<h3>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h3>

<p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º {keyword.lower()} –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—á–∞—Å—Ç–∏—è –≤ –∑–∞–∫—É–ø–∫–∞—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.</p>

<p><a href="https://bizfin-pro.ru/calculator" class="wp-block-button__link">–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</a></p>

<hr>

<p><em>–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ {datetime.now().strftime('%Y-%m-%d')}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.</em></p>
"""
        
        return conclusion
    
    def generate_adaptive_title(self, keyword, intent_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if intent_type == 'transactional':
            return f"{keyword.title()}: –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
        elif intent_type == 'navigational':
            return f"{keyword.title()}: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
        else:  # informational
            return f"{keyword.title()}: –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –∞–Ω–∞–ª–∏–∑"
    
    def generate_adaptive_sections(self, keyword, research_data, intent_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if intent_type == 'informational':
            return self.generate_informational_sections(keyword, research_data)
        
        # –†–∞–∑–¥–µ–ª—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)
        elif intent_type == 'transactional':
            return self.generate_transactional_sections(keyword, research_data)
        
        # –†–∞–∑–¥–µ–ª—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        elif intent_type == 'navigational':
            return self.generate_navigational_sections(keyword, research_data)
        
        else:
            return self.generate_informational_sections(keyword, research_data)
    
    def generate_informational_sections(self, keyword, research_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword.lower():
            return [
                {"title": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏", "word_count": 350},
                {"title": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è 44-–§–ó –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", "word_count": 300},
                {"title": "–£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "word_count": 350},
                {"title": "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∏ –∑–∞—è–≤–∫–µ", "word_count": 300},
                {"title": "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "word_count": 300},
                {"title": "–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "word_count": 250},
                {"title": "–°—Ä–æ–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "word_count": 250},
                {"title": "–ü–æ–º–æ—â—å –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "word_count": 200}
            ]
        
        elif "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword.lower():
            return [
                {"title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏", "word_count": 300},
                {"title": "–§–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞—Å—á–µ—Ç–∞", "word_count": 400},
                {"title": "–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", "word_count": 350},
                {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤", "word_count": 400},
                {"title": "–û–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "word_count": 300},
                {"title": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–∞", "word_count": 300},
                {"title": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç", "word_count": 250},
                {"title": "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º", "word_count": 200}
            ]
        
        else:
            return [
                {"title": "–û—Å–Ω–æ–≤—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã", "word_count": 300},
                {"title": "–í–∏–¥—ã –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "word_count": 400},
                {"title": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è", "word_count": 350},
                {"title": "–ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "word_count": 400},
                {"title": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å—Ä–æ–∫–∏", "word_count": 350},
                {"title": "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ñ–∞–∫—Ç–æ—Ä—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "word_count": 300},
                {"title": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "word_count": 250},
                {"title": "–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "word_count": 200}
            ]
    
    def generate_transactional_sections(self, keyword, research_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)"""
        
        if "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword.lower():
            return [
                {"title": "–ü–æ—à–∞–≥–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "word_count": 400},
                {"title": "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "word_count": 350},
                {"title": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "word_count": 400},
                {"title": "–ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–Ω–∫", "word_count": 350},
                {"title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–æ–º", "word_count": 300},
                {"title": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", "word_count": 300},
                {"title": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏", "word_count": 250},
                {"title": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç", "word_count": 200}
            ]
        
        else:
            return [
                {"title": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é", "word_count": 400},
                {"title": "–í—ã–±–æ—Ä –±–∞–Ω–∫–∞-–≥–∞—Ä–∞–Ω—Ç–∞", "word_count": 350},
                {"title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏", "word_count": 400},
                {"title": "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", "word_count": 350},
                {"title": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞", "word_count": 300},
                {"title": "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏", "word_count": 300},
                {"title": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏", "word_count": 250},
                {"title": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞", "word_count": 200}
            ]
    
    def generate_navigational_sections(self, keyword, research_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
        
        return [
            {"title": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "word_count": 300},
            {"title": "–ü—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤—ã –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "word_count": 400},
            {"title": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∏–¥–æ–≤ –∏ —Ç–∏–ø–æ–≤", "word_count": 350},
            {"title": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è", "word_count": 400},
            {"title": "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "word_count": 350},
            {"title": "–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –∏ —Å—Ä–æ–∫–∏", "word_count": 300},
            {"title": "–¢–∞—Ä–∏—Ñ—ã –∏ —Ä–∞—Å—á–µ—Ç—ã", "word_count": 250},
            {"title": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã", "word_count": 200}
        ]
    
    def create_statistics_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Ñ–∞–∫—Ç–∞–º–∏"""
        stats = research_data.get('statistical_data', [])
        facts = research_data.get('key_facts_figures', [])
        
        content = f"""<p>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {keyword.lower()} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</p>

<h4>üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞:</h4>
<ul>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for stat in stats:
            content += f"<li>{stat}</li>\n"
        
        content += f"""</ul>

<h4>üî¢ –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã:</h4>
<table class="wp-block-table">
<thead>
<tr><th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th><th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th></tr>
</thead>
<tbody>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        for i, fact in enumerate(facts[:4]):
            parts = fact.split(': ')
            if len(parts) >= 2:
                param = parts[0]
                value = parts[1]
                comment = "–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ 2024 –≥–æ–¥" if i == 0 else "–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
            else:
                param = f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å {i+1}"
                value = fact
                comment = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            
            content += f"<tr><td>{param}</td><td>{value}</td><td>{comment}</td></tr>\n"
        
        content += f"""</tbody>
</table>

<p>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å –º–∞—Å—à—Ç–∞–±—ã —Ä—ã–Ω–∫–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ —Å—Ñ–µ—Ä–µ {keyword.lower()}.</p>

"""
        
        return content
    
    def create_trends_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏"""
        trends = research_data.get('trends_tendencies', [])
        
        content = f"""<p>–†—ã–Ω–æ–∫ {keyword.lower()} –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –≤—ã–¥–µ–ª—è—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã:</p>

<h4>üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è:</h4>
<ul>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        for trend in trends:
            content += f"<li>{trend}</li>\n"
        
        content += f"""</ul>

<h4>üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ:</h4>
<p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä—ã–Ω–∫–∞ {keyword.lower()} –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:</p>

<ol>
<li><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:</strong> –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</li>
<li><strong>–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç</li>
<li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±–∞—Ä—å–µ—Ä–æ–≤:</strong> –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</li>
<li><strong>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –†–∞–∑–≤–∏—Ç–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π</li>
</ol>

<p>–≠—Ç–∏ —Ç—Ä–µ–Ω–¥—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –¥–µ–ª–∞—é—Ç {keyword.lower()} –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π.</p>

"""
        
        return content
    
    def create_expert_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ –º–Ω–µ–Ω–∏—è–º–∏"""
        opinions = research_data.get('expert_opinions', [])
        
        content = f"""<p>–≠–∫—Å–ø–µ—Ä—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –¥–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å {keyword.lower()}:</p>

<h4>üë®‚Äçüíº –ú–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</h4>
<ul>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        for opinion in opinions:
            content += f"<li>{opinion}</li>\n"
        
        content += f"""</ul>

<h4>üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:</h4>

<div class="wp-block-group">
<h4>‚úÖ –ß—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –¥–µ–ª–∞—Ç—å:</h4>
<ul>
<li>–¢—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—Ç—å —É—Å–ª–æ–≤–∏—è –±–∞–Ω–∫–æ–≤</li>
<li>–°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–∞—Ö</li>
<li>–û–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º</li>
<li>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ</li>
<li>–°–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ</li>
</ul>

<h4>‚ùå –ß–µ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å:</h4>
<ul>
<li>–†–∞–±–æ—Ç—ã —Å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏</li>
<li>–ü—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π</li>
<li>–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–ª–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö</li>
<li>–ü–æ–¥–∞—á–∏ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
<li>–ù–∞—Ä—É—à–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</li>
</ul>
</div>

<p>–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.</p>

"""
        
        return content
    
    def create_case_studies_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –∫–µ–π—Å–∞–º–∏"""
        cases = research_data.get('case_studies', [])
        
        content = f"""<p>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–º–æ–≥—É—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å {keyword.lower()}:</p>

<h4>üìã –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏ –ø—Ä–∏–º–µ—Ä—ã:</h4>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–µ–π—Å—ã
        for i, case in enumerate(cases, 1):
            content += f"""
<h4>–ö–µ–π—Å {i}: {case}</h4>
<p>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</p>

<ul>
<li><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–Ω–∏–∫—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏</li>
<li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –ü—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã –∏ –ø–æ–¥—Ö–æ–¥—ã</li>
<li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–≤–æ–¥—ã</li>
</ul>
"""
        
        content += f"""
<h4>üéØ –£—Ä–æ–∫–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏:</h4>
<p>–ê–Ω–∞–ª–∏–∑ –∫–µ–π—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —É—Å–ø–µ—Ö –≤ —Ä–∞–±–æ—Ç–µ —Å {keyword.lower()} –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:</p>

<ul>
<li>–¢—â–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
<li>–ü—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞-–ø–∞—Ä—Ç–Ω–µ—Ä–∞</li>
<li>–ü–æ–Ω–∏–º–∞–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞</li>
<li>–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤</li>
<li>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Ç—É–∞—Ü–∏–∏</li>
</ul>

<p>–≠—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å {keyword.lower()}.</p>

"""
        
        return content
    
    def create_practical_tips_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏"""
        pain_points = research_data.get('pain_points', [])
        solutions = research_data.get('solutions', [])
        
        content = f"""<p>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å {keyword.lower()}:</p>

<h4>‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è:</h4>
"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ
        for i, (problem, solution) in enumerate(zip(pain_points[:3], solutions[:3]), 1):
            content += f"""
<h4>–ü—Ä–æ–±–ª–µ–º–∞ {i}: {problem}</h4>
<p><strong>–†–µ—à–µ–Ω–∏–µ:</strong> {solution}</p>
<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã...</p>
"""
        
        content += f"""
<h4>üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏:</h4>
<ul>
<li><strong>–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏:</strong> –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ</li>
<li><strong>–≠–∫–æ–Ω–æ–º–∏—è –¥–µ–Ω–µ–≥:</strong> –°—Ä–∞–≤–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤ 3-5 –±–∞–Ω–∫–∞—Ö</li>
<li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</strong> –†–∞–±–æ—Ç–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏</li>
<li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã</li>
<li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤:</strong> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º</li>
</ul>

<h4>üìã –ß–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π:</h4>
<ol>
<li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ {keyword.lower()}</li>
<li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∞–Ω–∫–∏</li>
<li>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
<li>–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–Ω–∫–æ–≤</li>
<li>–°—Ä–∞–≤–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
<li>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</li>
<li>–û—Ñ–æ—Ä–º–∏—Ç–µ {keyword.lower()}</li>
<li>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤</li>
</ol>

"""
        
        return content
    
    def create_unique_faq_section(self, keyword, research_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ FAQ —Ä–∞–∑–¥–µ–ª–∞"""
        questions = research_data.get('popular_questions', [])
        
        content = f"""<p>–û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ {keyword.lower()}:</p>

<h4>‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</h4>
"""
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ FAQ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        unique_questions = [
            f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword.lower()}?",
            f"–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword.lower()}?",
            f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {keyword.lower()}?",
            f"–ú–æ–∂–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword.lower()} –±–µ–∑ –∑–∞–ª–æ–≥–∞?",
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –±–∞–Ω–∫–∞ –≤ {keyword.lower()}?",
            f"–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å {keyword.lower()}?",
            f"–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è {keyword.lower()}?",
            f"–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π {keyword.lower()}?"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        for question in questions[:2]:
            if question not in unique_questions:
                unique_questions.append(question)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        for i, question in enumerate(unique_questions[:6], 1):
            content += f"""
<h3>‚ùì {question}</h3>
<p>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏...</p>
"""
        
        content += f"""
<h4>üìû –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?</h4>
<p>–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ {keyword.lower()}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.</p>

"""
        
        return content
    
    def create_additional_content_section(self, keyword, research_data, section_title):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content = f"""<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ {keyword.lower()}:</p>

<h4>üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</h4>
<ul>
<li>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã</li>
<li>–û–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω—ã</li>
<li>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</li>
<li>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</li>
<li>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã</li>
</ul>

<h4>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h4>
<ul>
<li><a href="https://zakupki.gov.ru" target="_blank">–ï–¥–∏–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</a></li>
<li><a href="https://cbr.ru" target="_blank">–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏</a></li>
<li><a href="https://minfin.gov.ru" target="_blank">–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</a></li>
</ul>

<p>–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö {keyword.lower()}.</p>

"""
        
        return content
    
    
    def generate_documents_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        content = f"""<p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {keyword.lower()} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>

<h4>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4>

<ul>
<li><strong>–£—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</strong>
    <ul>
    <li>–£—Å—Ç–∞–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</li>
    <li>–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</li>
    <li>–í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–Æ–õ</li>
    </ul>
</li>
<li><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</strong>
    <ul>
    <li>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∑–∞ 2 –≥–æ–¥–∞</li>
    <li>–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏</li>
    <li>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞</li>
    </ul>
</li>
<li><strong>–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:</strong>
    <ul>
    <li>–ò–∑–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ</li>
    <li>–ü—Ä–æ–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</li>
    <li>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</li>
    </ul>
</li>
</ul>

<h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:</h4>
<p>–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏, –∑–∞–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∞–Ω–∫–∞.</p>

<p>–°—Ä–æ–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 7-15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.</p>

"""
        return content
    
    def generate_verification_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        content = f"""<p>–ü—Ä–æ–≤–µ—Ä–∫–∞ {keyword.lower()} - —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.</p>

<h4>–ì–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:</h4>
<ul>
<li><strong>–†–µ–µ—Å—Ç—Ä –ï–ò–°:</strong> zakupki.gov.ru</li>
<li><strong>–°–∞–π—Ç –±–∞–Ω–∫–∞-–≥–∞—Ä–∞–Ω—Ç–∞:</strong> –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</li>
<li><strong>–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–Ω–∫:</strong> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å</li>
</ul>

<h4>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:</h4>
<table class="wp-block-table">
<thead>
<tr><th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th><th>–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å</th></tr>
</thead>
<tbody>
<tr><td>–ù–æ–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–∏</td><td>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ</td></tr>
<tr><td>–ë–∞–Ω–∫-–≥–∞—Ä–∞–Ω—Ç</td><td>–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è</td></tr>
<tr><td>–°—É–º–º–∞</td><td>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É</td></tr>
<tr><td>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</td><td>–ù–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏</td></tr>
<tr><td>–°—Ç–∞—Ç—É—Å</td><td>–î–µ–π—Å—Ç–≤—É—é—â–∞—è/–æ—Ç–æ–∑–≤–∞–Ω–Ω–∞—è</td></tr>
</tbody>
</table>

<h4>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏:</h4>
<ul>
<li>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ</li>
<li>–û—à–∏–±–∫–∏ –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –±–∞–Ω–∫–∞</li>
<li>–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É</li>
<li>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
</ul>

<p>–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫ –∏ —É–≤–µ–¥–æ–º–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞.</p>

"""
        return content
    
    def generate_process_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        content = f"""<p>–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è {keyword.lower()} —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤.</p>

<h4>–ü–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:</h4>

<ol>
<li><strong>–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø:</strong>
    <ul>
    <li>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</li>
    <li>–í—ã–±–æ—Ä –±–∞–Ω–∫–∞-–≥–∞—Ä–∞–Ω—Ç–∞</li>
    <li>–°–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
    </ul>
</li>
<li><strong>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏:</strong>
    <ul>
    <li>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</li>
    <li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
    <li>–û–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏</li>
    </ul>
</li>
<li><strong>–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:</strong>
    <ul>
    <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
    <li>–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
    <li>–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è</li>
    </ul>
</li>
<li><strong>–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏:</strong>
    <ul>
    <li>–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞</li>
    <li>–í—ã–¥–∞—á–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏</li>
    <li>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ</li>
    </ul>
</li>
</ol>

<p>–û–±—â–∏–π —Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 3 –¥–æ 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–Ω–∫–∞.</p>

"""
        return content
    
    def generate_cost_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        content = f"""<p>–°—Ç–æ–∏–º–æ—Å—Ç—å {keyword.lower()} –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.</p>

<h4>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</h4>

<ul>
<li><strong>–†–∞–∑–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–∏:</strong> –ß–µ–º –±–æ–ª—å—à–µ —Å—É–º–º–∞, —Ç–µ–º –≤—ã—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
<li><strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–∂–µ</li>
<li><strong>–¢–∏–ø –≥–∞—Ä–∞–Ω—Ç–∏–∏:</strong> –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
<li><strong>–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–Ω–∏–∂–∞—é—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
<li><strong>–ù–∞–ª–∏—á–∏–µ –∑–∞–ª–æ–≥–∞:</strong> –ó–∞–ª–æ–≥ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é</li>
</ul>

<h4>–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:</h4>
<table class="wp-block-table">
<thead>
<tr><th>–°—É–º–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏</th><th>–°—Ç–∞–≤–∫–∞ (–≥–æ–¥–æ–≤—ã—Ö)</th><th>–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≥–æ–¥</th></tr>
</thead>
<tbody>
<tr><td>–î–æ 1 –º–ª–Ω —Ä—É–±.</td><td>3-5%</td><td>30-50 —Ç—ã—Å. —Ä—É–±.</td></tr>
<tr><td>1-5 –º–ª–Ω —Ä—É–±.</td><td>2-4%</td><td>20-200 —Ç—ã—Å. —Ä—É–±.</td></tr>
<tr><td>5-10 –º–ª–Ω —Ä—É–±.</td><td>1.5-3%</td><td>75-300 —Ç—ã—Å. —Ä—É–±.</td></tr>
<tr><td>–°–≤—ã—à–µ 10 –º–ª–Ω —Ä—É–±.</td><td>1-2%</td><td>100 —Ç—ã—Å. —Ä—É–±.+</td></tr>
</tbody>
</table>

<p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–Ω–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π.</p>

"""
        return content
    
    def generate_tips_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ–≤–µ—Ç–æ–≤"""
        content = f"""<p>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å {keyword.lower()} –ø–æ–º–æ–≥—É—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫.</p>

<h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>

<ul>
<li><strong>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ:</strong> –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞ 2-3 –Ω–µ–¥–µ–ª–∏ –¥–æ —Å—Ä–æ–∫–∞</li>
<li><strong>–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –±–∞–Ω–∫–∏:</strong> –ò–∑—É—á–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤ 3-5 –±–∞–Ω–∫–∞—Ö</li>
<li><strong>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</strong> –°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ</li>
<li><strong>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏:</strong> –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</li>
<li><strong>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ä–æ–∫–∞–º–∏:</strong> –ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏</li>
</ul>

<h4>–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:</h4>

<div class="wp-block-group">
<h4>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å:</h4>
<ul>
<li>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å</li>
<li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
<li>–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–∞–Ω–∫–∞</li>
<li>–†–∞–±–æ—Ç–∞ —Å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏</li>
</ul>
</div>

<p>–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ–º–æ–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword.lower()} –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º.</p>

"""
        return content
    
    def generate_faq_content(self, keyword, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ FAQ"""
        content = f"""<p>–û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ {keyword.lower()}.</p>

    <h3>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword.lower()}?</h3>
<p>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1-5% –æ—Ç —Å—É–º–º—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤ –≥–æ–¥, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ª–æ–≤–∏–π –±–∞–Ω–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.</p>

<h3>–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å?</h3>
<p>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 3-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, —Å—Ä–æ—á–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞ 1-2 –¥–Ω—è.</p>

<h3>–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?</h3>
<p>–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç —É—á—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É.</p>

<h3>–ú–æ–∂–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –±–µ–∑ –∑–∞–ª–æ–≥–∞?</h3>
<p>–î–∞, –º–Ω–æ–≥–∏–µ –±–∞–Ω–∫–∏ –≤—ã–¥–∞—é—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑ –∑–∞–ª–æ–≥–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.</p>

<h3>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –±–∞–Ω–∫–∞?</h3>
<p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏, —É–ª—É—á—à–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ.</p>

"""
        return content
    
    def generate_general_content(self, keyword, section_title, word_count):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        content = f"""<p>{section_title} —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å {keyword.lower()}.</p>

<p>–ü—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</p>

<ul>
<li>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞</li>
<li>–£—Å–ª–æ–≤–∏—è –±–∞–Ω–∫–æ–≤</li>
<li>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã</li>
<li>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏</li>
</ul>

<p>–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å {keyword.lower()}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>

<ol>
<li>–ò–∑—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
<li>–°—Ä–∞–≤–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–∞—Ö</li>
<li>–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
<li>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</li>
</ol>

<p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å {keyword.lower()}, –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –∏ –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.</p>

"""
        return content
    
    def publish_to_wordpress(self, keyword, content, title, slug):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –≤ WordPress"""
        print(f"   üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress: {title}")
        
        post_data = {
            'title': title,
            'content': content,
            'slug': slug,
            'status': 'draft',
            'meta': {
                'yoast_wpseo_focuskw': keyword,
                'yoast_wpseo_metadesc': f"{keyword} - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
            }
        }
        
        try:
            response = requests.post(
                f"{self.wp_url}/posts",
                auth=self.wp_auth,
                json=post_data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 201:
                post = response.json()
                wp_id = post['id']
                wp_url = post['link']
                
                print(f"   ‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω –≤ WordPress (ID: {wp_id})")
                print(f"   üîó URL: {wp_url}")
                print(f"   üìù –°—Ç–∞—Ç—É—Å: –ß–ï–†–ù–û–í–ò–ö (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏)")
                
                return {
                    'wp_id': wp_id,
                    'wp_url': wp_url,
                    'status': 'draft'
                }
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return None
    
    def save_article_to_db(self, keyword, wp_result, quality_score=None, seo_score=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        if wp_result:
            cursor = self.conn.cursor()
            
            word_count = len(wp_result.get('content', '').split()) if 'content' in wp_result else 0
            content_rating = ((quality_score or 0) + (seo_score or 0)) // 2
            
            cursor.execute('''
                INSERT INTO articles (keyword, wp_post_id, wp_post_url, status, word_count, quality_score, seo_score, content_rating)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                keyword,
                wp_result['wp_id'],
                wp_result['wp_url'],
                wp_result['status'],
                word_count,
                quality_score or 0,
                seo_score or 0,
                content_rating
            ))
            
            article_id = cursor.lastrowid
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            if quality_score is not None and seo_score is not None:
                self.save_quality_metrics(article_id, quality_score, seo_score, content_rating)
            
            self.conn.commit()
            
            print(f"   üíæ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID: {article_id}")
            print(f"   üìä –ú–µ—Ç—Ä–∏–∫–∏: –ö–∞—á–µ—Å—Ç–≤–æ {quality_score or 0}/100, SEO {seo_score or 0}/100")
            return article_id
        
        return None
    
    def run_automation(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ì–û WordPress Automation Script")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üéØ –¶–µ–ª—å: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (2000+ —Å–ª–æ–≤) –ø–æ —á–∞—Å—Ç—è–º")
        print("=" * 60)
        
        results = []
        
        for i, keyword in enumerate(self.keywords, 1):
            print(f"\n{'='*60}")
            print(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(self.keywords)}: {keyword}")
            print(f"{'='*60}")
            
            try:
                # 1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                research_data = self.research_keyword(keyword)
                
                # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
                outline = self.create_article_outline(keyword, research_data)
                
                # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ —á–∞—Å—Ç—è–º —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞
                content, quality_score, seo_score = self.generate_article_content(keyword, research_data, outline)
                
                # 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress
                title = outline['title']
                slug = self.transliterate_keyword(keyword)
                
                wp_result = self.publish_to_wordpress(keyword, content, title, slug)
                
                # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                article_id = self.save_article_to_db(keyword, wp_result, quality_score, seo_score)
                
                if wp_result:
                    results.append({
                        'keyword': keyword,
                        'article_id': article_id,
                        'wp_id': wp_result['wp_id'],
                        'wp_url': wp_result['wp_url'],
                        'status': 'success',
                        'word_count': len(content.split()),
                        'quality_score': quality_score,
                        'seo_score': seo_score,
                        'content_rating': ((quality_score or 0) + (seo_score or 0)) // 2
                    })
                    print(f"   ‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ (WP ID: {wp_result['wp_id']})")
                    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100, SEO: {seo_score}/100")
                else:
                    results.append({
                        'keyword': keyword,
                        'article_id': None,
                        'wp_id': None,
                        'wp_url': None,
                        'status': 'error',
                        'word_count': 0,
                        'quality_score': 0,
                        'seo_score': 0,
                        'content_rating': 0
                    })
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{keyword}'")
                
            except Exception as e:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{keyword}': {str(e)}")
                results.append({
                    'keyword': keyword,
                    'article_id': None,
                    'wp_id': None,
                    'wp_url': None,
                    'status': 'error',
                    'word_count': 0
                })
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.display_final_results(results)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        if self.conn:
            self.conn.close()
            print("\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    def display_final_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*80}")
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–ö–†–ò–ü–¢–ê")
        print(f"{'='*80}")
        
        successful = [r for r in results if r['status'] == 'success']
        failed = [r for r in results if r['status'] == 'error']
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(successful)}/{len(results)}")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if successful:
            avg_quality = sum(r.get('quality_score', 0) for r in successful) / len(successful)
            avg_seo = sum(r.get('seo_score', 0) for r in successful) / len(successful)
            avg_rating = sum(r.get('content_rating', 0) for r in successful) / len(successful)
            avg_words = sum(r.get('word_count', 0) for r in successful) / len(successful)
            
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/100")
            print(f"üîç –°—Ä–µ–¥–Ω—è—è SEO-–æ—Ü–µ–Ω–∫–∞: {avg_seo:.1f}/100")
            print(f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {avg_rating:.1f}/100")
            print(f"üìÑ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Å—Ç–∞—Ç–µ–π: {avg_words:.0f} —Å–ª–æ–≤")
        
        print(f"\nüìã –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –°–¢–ê–¢–ï–ô:")
        print("-" * 80)
        
        for i, result in enumerate(results, 1):
            keyword = result['keyword']
            wp_id = result['wp_id']
            wp_url = result['wp_url']
            status = result['status']
            word_count = result.get('word_count', 0)
            quality_score = result.get('quality_score', 0)
            seo_score = result.get('seo_score', 0)
            content_rating = result.get('content_rating', 0)
            
            if status == 'success':
                print(f"{i:2d}. {keyword}")
                print(f"    ID –≤ –ë–î: {result['article_id']} | WP ID: {wp_id} | –°—Ç–∞—Ç—É—Å: ‚úÖ –°–û–ó–î–ê–ù–ê")
                print(f"    üîó URL: {wp_url}")
                print(f"    üìÑ –û–±—ä–µ–º: {word_count} —Å–ª–æ–≤ | ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100 | üîç SEO: {seo_score}/100 | üìä –†–µ–π—Ç–∏–Ω–≥: {content_rating}/100")
            else:
                print(f"{i:2d}. {keyword}")
                print(f"    ID –≤ –ë–î: None | WP ID: None | –°—Ç–∞—Ç—É—Å: ‚ùå –û–®–ò–ë–ö–ê")
                print(f"    üîó URL: None")
            
            print()
    
    def transliterate_keyword(self, keyword):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–∞–≥–∞"""
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        result = keyword.lower()
        for ru, en in translit_map.items():
            result = result.replace(ru, en)
        
        # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        result = re.sub(r'[^\w\-]', '-', result)
        result = re.sub(r'-+', '-', result)
        result = result.strip('-')
        
        return result
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    def analyze_user_intent(self, keyword):
        """–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyword_lower = keyword.lower()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if any(word in keyword_lower for word in ['–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å—á–µ—Ç', '—Ü–µ–Ω–∞']):
            return {
                'type': 'transactional',
                'goal': '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏',
                'urgency': 'high',
                'content_focus': 'calculations',
                'priority_sections': ['cost_calculation', 'examples', 'comparison', 'formulas']
            }
        elif any(word in keyword_lower for word in ['–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Å–ø–∏—Å–æ–∫', '–ø–µ—Ä–µ—á–µ–Ω—å', '–Ω—É–∂–Ω—ã']):
            return {
                'type': 'informational',
                'goal': '–£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'urgency': 'medium',
                'content_focus': 'documents',
                'priority_sections': ['document_list', 'requirements', 'preparation', 'tips']
            }
        elif any(word in keyword_lower for word in ['–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', '—Ä–µ–µ—Å—Ç—Ä', '–ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å', '–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å']):
            return {
                'type': 'informational',
                'goal': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é',
                'urgency': 'high',
                'content_focus': 'verification',
                'priority_sections': ['verification_process', 'registry_check', 'fraud_prevention', 'troubleshooting']
            }
        elif any(word in keyword_lower for word in ['–æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–≤—ã–¥–∞—Ç—å']):
            return {
                'type': 'transactional',
                'goal': '–û—Ñ–æ—Ä–º–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é',
                'urgency': 'high',
                'content_focus': 'process',
                'priority_sections': ['step_by_step', 'requirements', 'timeline', 'tips']
            }
        else:
            return {
                'type': 'informational',
                'goal': '–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                'urgency': 'low',
                'content_focus': 'general',
                'priority_sections': ['overview', 'types', 'benefits', 'basics']
            }
    
    def estimate_search_volume(self, keyword):
        """–û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        keyword_lower = keyword.lower()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        high_volume_words = ['–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–æ—Ñ–æ—Ä–º–∏—Ç—å']
        medium_volume_words = ['–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', '—Å–ø–∏—Å–æ–∫', '–ø–æ–ª—É—á–∏—Ç—å', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']
        
        if any(word in keyword_lower for word in high_volume_words):
            return "–í—ã—Å–æ–∫–∏–π (5000+ –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)"
        elif any(word in keyword_lower for word in medium_volume_words):
            return "–°—Ä–µ–¥–Ω–∏–π (1000-5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)"
        else:
            return "–ù–∏–∑–∫–∏–π (–¥–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)"
    
    def analyze_competition(self, keyword):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        keyword_lower = keyword.lower()
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
        high_competition_words = ['–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å']
        medium_competition_words = ['–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', '—Å–ø–∏—Å–æ–∫']
        
        if any(word in keyword_lower for word in high_competition_words):
            return "–í—ã—Å–æ–∫–∞—è (–º–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)"
        elif any(word in keyword_lower for word in medium_competition_words):
            return "–°—Ä–µ–¥–Ω—è—è (—É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è)"
        else:
            return "–ù–∏–∑–∫–∞—è (–º–∞–ª–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)"
    
    def generate_real_questions(self, keyword, intent_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        intent_type = intent_analysis['type']
        content_focus = intent_analysis['content_focus']
        
        if content_focus == 'calculations':
            return [
                f"–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å {keyword.lower()}?",
                f"–û—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ü–µ–Ω–∞ {keyword.lower()}?",
                f"–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ {keyword.lower()}?",
                f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword.lower()} –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤?",
                f"–ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ {keyword.lower()}?"
            ]
        elif content_focus == 'documents':
            return [
                f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {keyword.lower()}?",
                f"–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {keyword.lower()} 44-–§–ó",
                f"–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {keyword.lower()}?",
                f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {keyword.lower()}",
                f"–ì–¥–µ –≤–∑—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {keyword.lower()}?"
            ]
        elif content_focus == 'verification':
            return [
                f"–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {keyword.lower()} –≤ —Ä–µ–µ—Å—Ç—Ä–µ?",
                f"–ì–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å {keyword.lower()}?",
                f"–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å {keyword.lower()}?",
                f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {keyword.lower()} –æ–Ω–ª–∞–π–Ω",
                f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ {keyword.lower()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞?"
            ]
        else:
            return [
                f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword.lower()}?",
                f"–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ {keyword.lower()}?",
                f"–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç {keyword.lower()}?",
                f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {keyword.lower()}",
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ {keyword.lower()}"
            ]
    
    def identify_real_pain_points(self, keyword, intent_analysis):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        content_focus = intent_analysis['content_focus']
        
        if content_focus == 'calculations':
            return [
                "–ù–µ –∑–Ω–∞—é—Ç –∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                "–°–ª–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤",
                "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç –æ—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ü–µ–Ω–∞",
                "–ë–æ—è—Ç—Å—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é",
                "–ù–µ –∑–Ω–∞—é—Ç –∫–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏"
            ]
        elif content_focus == 'documents':
            return [
                "–ù–µ –∑–Ω–∞—é—Ç –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã",
                "–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ",
                "–°–ª–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
                "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–Ω–∫–∞"
            ]
        elif content_focus == 'verification':
            return [
                "–ù–µ –∑–Ω–∞—é—Ç –≥–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é",
                "–°–æ–º–Ω–µ–≤–∞—é—Ç—Å—è –≤ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç –∫–∞–∫ —á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ",
                "–ù–µ –∑–Ω–∞—é—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"
            ]
        else:
            return [
                "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç —á—Ç–æ —Ç–∞–∫–æ–µ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è",
                "–ù–µ –∑–Ω–∞—é—Ç –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω—É–∂–Ω–∞",
                "–°–ª–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
                "–ë–æ—è—Ç—Å—è —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –æ—à–∏–±–æ–∫"
            ]
    
    def generate_targeted_solutions(self, keyword, intent_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º"""
        content_focus = intent_analysis['content_focus']
        
        if content_focus == 'calculations':
            return [
                "–û–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–∞—Ö",
                "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏",
                "–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º",
                "–°–æ–≤–µ—Ç—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
            ]
        elif content_focus == 'documents':
            return [
                "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–û–±—Ä–∞–∑—Ü—ã –∏ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π",
                "–ü–æ–º–æ—â—å –≤ —Å–±–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            ]
        elif content_focus == 'verification':
            return [
                "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã",
                "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º",
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏"
            ]
        else:
            return [
                "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è",
                "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏",
                "–ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
                "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ]
    
    def identify_thematic_areas(self, keyword, intent_analysis):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        content_focus = intent_analysis['content_focus']
        
        base_areas = [
            "–û—Å–Ω–æ–≤—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
            "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞",
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤",
            "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
        ]
        
        if content_focus == 'calculations':
            return base_areas + [
                "–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
                "–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ü–µ–Ω—É",
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                "–°–ø–æ—Å–æ–±—ã —ç–∫–æ–Ω–æ–º–∏–∏"
            ]
        elif content_focus == 'documents':
            return base_areas + [
                "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏"
            ]
        elif content_focus == 'verification':
            return base_areas + [
                "–†–µ–µ—Å—Ç—Ä—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
                "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏",
                "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
            ]
        else:
            return base_areas + [
                "–í–∏–¥—ã –≥–∞—Ä–∞–Ω—Ç–∏–π",
                "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏",
                "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è",
                "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
            ]
    
    def find_unique_aspects(self, keyword, intent_analysis):
        """–ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤"""
        content_focus = intent_analysis['content_focus']
        
        if content_focus == 'calculations':
            return [
                "–°–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–æ–≤",
                "–°–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫",
                "–õ—å–≥–æ—Ç—ã –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
                "–í–ª–∏—è–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
                "–ù–∞–ª–æ–≥–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã"
            ]
        elif content_focus == 'documents':
            return [
                "–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å",
                "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                "–°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            ]
        elif content_focus == 'verification':
            return [
                "–ë–ª–æ–∫—á–µ–π–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞",
                "–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            ]
        else:
            return [
                "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è",
                "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –æ–ø—ã—Ç",
                "–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "–ë—É–¥—É—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏"
            ]
    
    def collect_real_statistical_data(self, keyword):
        """–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        keyword_lower = keyword.lower()
        
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword_lower or "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in keyword_lower:
            return [
                "–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—è–º –≤ 2024 –≥–æ–¥—É: 2.5-4% –≥–æ–¥–æ–≤—ã—Ö",
                "–û–±—ä–µ–º —Ä—ã–Ω–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –≤ –†–æ—Å—Å–∏–∏: 1.2 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤-–≥–∞—Ä–∞–Ω—Ç–æ–≤: 150+ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π",
                "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 5-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
                "–î–æ–ª—è –æ–Ω–ª–∞–π–Ω-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 35% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞"
            ]
        elif "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword_lower:
            return [
                "–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 15-20 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 7-15 –¥–Ω–µ–π",
                "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤ –∏–∑-–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 25%",
                "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏: 40% - —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 10-50 —Ç—ã—Å. —Ä—É–±."
            ]
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in keyword_lower or "—Ä–µ–µ—Å—Ç—Ä" in keyword_lower:
            return [
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: 5000+",
                "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π: 2-3%",
                "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: 2-3 –º–∏–Ω—É—Ç—ã",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: 200+",
                "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
            ]
        else:
            return [
                "–†–æ—Å—Ç —Ä—ã–Ω–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π: +15% –≤ –≥–æ–¥",
                "–î–æ–ª—è –≥–æ—Å–∑–∞–∫—É–ø–æ–∫ —Å –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏: 80%",
                "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 5-30% –æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π: 500+ –≤ –¥–µ–Ω—å",
                "–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–æ–ª—Ç–æ–≤: –º–µ–Ω–µ–µ 1%"
            ]
    
    def analyze_real_trends(self, keyword):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        keyword_lower = keyword.lower()
        
        if "–æ–Ω–ª–∞–π–Ω" in keyword_lower:
            return [
                "–†–æ—Å—Ç –æ–Ω–ª–∞–π–Ω-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ 40% –≤ –≥–æ–¥",
                "–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥",
                "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–†–∞–∑–≤–∏—Ç–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            ]
        elif "—Å—Ä–æ—á–Ω–∞—è" in keyword_lower:
            return [
                "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
                "–†–∞–∑–≤–∏—Ç–∏–µ —ç–∫—Å–ø—Ä–µ—Å—Å-—É—Å–ª—É–≥",
                "–†–æ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            ]
        else:
            return [
                "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤",
                "–†–∞–∑–≤–∏—Ç–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
                "–£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ú–°–ë",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É—Å–ª—É–≥–∞–º–∏"
            ]
    
    def extract_real_facts(self, keyword):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
        keyword_lower = keyword.lower()
        
        if "5 000 000" in keyword:
            return [
                "–°—É–º–º–∞ 5 –º–ª–Ω —Ä—É–±. - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                "–ö–æ–º–∏—Å—Å–∏—è: 125-250 —Ç—ã—Å. —Ä—É–±. –≤ –≥–æ–¥",
                "–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 3-7 –¥–Ω–µ–π",
                "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±–æ—Ä–æ—Ç: –æ—Ç 50 –º–ª–Ω —Ä—É–±.",
                "–ó–∞–ª–æ–≥: 10-30% –æ—Ç —Å—É–º–º—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏"
            ]
        elif "44-—Ñ–∑" in keyword_lower:
            return [
                "44-–§–ó –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 2013 –≥–æ–¥–∞",
                "–ü–æ–∫—Ä—ã–≤–∞–µ—Ç 80% –≥–æ—Å–∑–∞–∫—É–ø–æ–∫",
                "–°—É–º–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 5-30% –æ—Ç –ù–ú–¶–ö",
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç 500 —Ç—ã—Å. —Ä—É–±."
            ]
        else:
            return [
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–µ –æ–±–ª–∞–≥–∞—é—Ç—Å—è –ù–î–°",
                "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12-36 –º–µ—Å—è—Ü–µ–≤",
                "–ë–µ–∑–æ—Ç–∑—ã–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞",
                "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ—Å—Ç—å –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏–∏"
            ]
    
    def gather_real_expert_opinions(self, keyword):
        """–°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –º–Ω–µ–Ω–∏–π"""
        keyword_lower = keyword.lower()
        
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword_lower:
            return [
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å 3-5 –±–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —Ä–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –±–∞–Ω–∫–æ–≤-–≥–∞—Ä–∞–Ω—Ç–æ–≤",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—Ç –æ —Ä–∏—Å–∫–∞—Ö –∑–∞–Ω–∏–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"
            ]
        elif "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword_lower:
            return [
                "–Æ—Ä–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ, –º–∏–Ω–∏–º—É–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Ç—ã –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –¥–µ–ª–∞—Ç—å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –±–∞–Ω–∫–æ–º –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π"
            ]
        else:
            return [
                "–≠–∫—Å–ø–µ—Ä—Ç—ã –Ω–∞—Å—Ç–∞–∏–≤–∞—é—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –∏–∑—É—á–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º –≥–∞—Ä–∞–Ω—Ç–∏–∏"
            ]
    
    def find_real_case_studies(self, keyword, intent_analysis):
        """–ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤"""
        content_focus = intent_analysis['content_focus']
        
        if content_focus == 'calculations':
            return [
                "–ö–µ–π—Å: –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å—ç–∫–æ–Ω–æ–º–∏–ª–∞ 150 —Ç—ã—Å. —Ä—É–±. —Å—Ä–∞–≤–Ω–∏–≤ 5 –±–∞–Ω–∫–æ–≤",
                "–ü—Ä–∏–º–µ—Ä: IT-–∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é –∑–∞ 1 –¥–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä—è —Ö–æ—Ä–æ—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
                "–ò—Å—Ç–æ—Ä–∏—è: –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏—Ä–º–∞ —Å–Ω–∏–∑–∏–ª–∞ —Å—Ç–∞–≤–∫—É —Å 4% –¥–æ 2.5%",
                "–°–ª—É—á–∞–π: –û—à–∏–±–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –±–∞–Ω–∫–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ –ø–µ—Ä–µ–ø–ª–∞—Ç–µ 50 —Ç—ã—Å. —Ä—É–±.",
                "–ü—Ä–∏–º–µ—Ä: –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –æ—Ñ–æ—Ä–º–∏–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é –±–µ–∑ –∑–∞–ª–æ–≥–∞"
            ]
        elif content_focus == 'documents':
            return [
                "–ö–µ–π—Å: –û—Ç–∫–∞–∑ –±–∞–Ω–∫–∞ –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤—ã–ø–∏—Å–∫–∏ –∏–∑ –ï–ì–†–Æ–õ",
                "–ü—Ä–∏–º–µ—Ä: –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–∞—á–∞ —Å –ø–æ–ª–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ 3 –¥–Ω—è",
                "–ò—Å—Ç–æ—Ä–∏—è: –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
                "–°–ª—É—á–∞–π: –ë—ã—Å—Ç—Ä–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π",
                "–ü—Ä–∏–º–µ—Ä: –û—Ç–∫–∞–∑ –∏ —É—Å–ø–µ—à–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"
            ]
        elif content_focus == 'verification':
            return [
                "–ö–µ–π—Å: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ —Å—É–º–º—É 10 –º–ª–Ω —Ä—É–±.",
                "–ü—Ä–∏–º–µ—Ä: –°–ø–∞—Å–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ",
                "–ò—Å—Ç–æ—Ä–∏—è: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤",
                "–°–ª—É—á–∞–π: –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
                "–ü—Ä–∏–º–µ—Ä: –û—Ç–∑—ã–≤ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–∞–Ω–∫–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"
            ]
        else:
            return [
                "–ö–µ–π—Å: –£—Å–ø–µ—à–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ 100 –º–ª–Ω —Ä—É–±.",
                "–ò—Å—Ç–æ—Ä–∏—è: –ò–∑–±–µ–∂–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞–¥–µ–∂–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–°–ª—É—á–∞–π: –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏—é",
                "–ü—Ä–∏–º–µ—Ä: –†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è —É—á–∞—Å—Ç–∏—é –≤ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö"
            ]
    
    def determine_user_intent(self, keyword):
        if any(word in keyword.lower() for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞']):
            return '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'
        elif any(word in keyword.lower() for word in ['–æ—Ñ–æ—Ä–º–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∫—É–ø–∏—Ç—å']):
            return '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π'
        else:
            return '–Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π'
    
    def generate_popular_questions(self, keyword):
        return [
            f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?",
            f"–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword}?",
            f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {keyword}?",
            f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è {keyword}?",
            f"–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å {keyword}?"
        ]
    
    def determine_target_audience(self, keyword):
        if '–∏–ø' in keyword.lower():
            return '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏'
        elif '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' in keyword.lower():
            return '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç—ã'
        else:
            return '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, —Ç–µ–Ω–¥–µ—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'
    
    def determine_region(self, keyword):
        if any(city in keyword.lower() for city in ['–º–æ—Å–∫–≤–∞', '—Å–ø–±', '–∏—Ä–∫—É—Ç—Å–∫']):
            return '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π'
        else:
            return '–†–æ—Å—Å–∏—è'
    
    def determine_industry(self, keyword):
        if any(word in keyword.lower() for word in ['—Å—Ç—Ä–æ–π–∫–∞', '–ø–æ—Å—Ç–∞–≤–∫–∞', '—É—Å–ª—É–≥–∏']):
            return '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –ø–æ—Å—Ç–∞–≤–∫–∏, —É—Å–ª—É–≥–∏'
        else:
            return '–û–±—â–∞—è'
    
    def generate_pain_points(self, keyword):
        return [
            f"–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º {keyword}",
            f"–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {keyword}",
            f"–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è {keyword}",
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            f"–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –≤—ã–±–æ—Ä–µ –±–∞–Ω–∫–∞"
        ]
    
    def generate_solutions(self, keyword):
        return [
            f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ {keyword}",
            f"–ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ {keyword}",
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –±–∞–Ω–∫–æ–≤",
            f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            f"–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ]
    
    def generate_thematic_areas(self, keyword):
        return [
            f"–û—Å–Ω–æ–≤—ã {keyword}",
            f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ {keyword}",
            f"–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è {keyword}",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å {keyword}",
            f"–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {keyword}",
            f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ {keyword}"
        ]
    
    def generate_unique_aspects(self, keyword):
        return [
            f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞ {keyword}",
            f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {keyword}",
            f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {keyword}",
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è {keyword}",
            f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã {keyword}"
        ]
    
    def collect_statistical_data(self, keyword):
        """–°–±–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword.lower():
            return [
                "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏: 2-5% –≥–æ–¥–æ–≤—ã—Ö",
                "–û–±—ä–µ–º —Ä—ã–Ω–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π: 1.2 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤-–≥–∞—Ä–∞–Ω—Ç–æ–≤: 150+",
                "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 5-7 –¥–Ω–µ–π",
                "–î–æ–ª—è –æ–Ω–ª–∞–π–Ω-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 35%"
            ]
        elif "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword.lower():
            return [
                "–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 15-20 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 7-15 –¥–Ω–µ–π",
                "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤ –∏–∑-–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 25%",
                "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏: 40% - —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 10-50 —Ç—ã—Å. —Ä—É–±."
            ]
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in keyword.lower():
            return [
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: 5000+",
                "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π: 2-3%",
                "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: 2-3 –º–∏–Ω—É—Ç—ã",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: 200+",
                "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
            ]
        else:
            return [
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ {keyword}",
                f"–û–±—ä–µ–º—ã {keyword} –≤ –†–æ—Å—Å–∏–∏",
                f"–î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ {keyword}",
                f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {keyword}",
                f"–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å {keyword}"
            ]
    
    def analyze_trends_tendencies(self, keyword):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"""
        if "–æ–Ω–ª–∞–π–Ω" in keyword.lower():
            return [
                "–†–æ—Å—Ç –æ–Ω–ª–∞–π–Ω-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ 40% –≤ –≥–æ–¥",
                "–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥",
                "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                "–†–∞–∑–≤–∏—Ç–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            ]
        elif "—Å—Ä–æ—á–Ω–∞—è" in keyword.lower():
            return [
                "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
                "–†–∞–∑–≤–∏—Ç–∏–µ —ç–∫—Å–ø—Ä–µ—Å—Å-—É—Å–ª—É–≥",
                "–†–æ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            ]
        elif "–∏–ø" in keyword.lower():
            return [
                "–†–æ—Å—Ç —á–∏—Å–ª–∞ –ò–ü –≤ –†–æ—Å—Å–∏–∏",
                "–£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ò–ü",
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
                "–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ò–ü",
                "–†–∞–∑–≤–∏—Ç–∏–µ –º–∏–∫—Ä–æ–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è"
            ]
        else:
            return [
                f"–¢—Ä–µ–Ω–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è {keyword}",
                f"–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ {keyword}",
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ {keyword}",
                f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ {keyword}",
                f"–ë—É–¥—É—â–µ–µ {keyword}"
            ]
    
    def extract_key_facts_figures(self, keyword):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ —Ü–∏—Ñ—Ä"""
        if "5 000 000" in keyword:
            return [
                "–°—É–º–º–∞ 5 –º–ª–Ω —Ä—É–±. - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                "–ö–æ–º–∏—Å—Å–∏—è: 125-250 —Ç—ã—Å. —Ä—É–±. –≤ –≥–æ–¥",
                "–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: 3-7 –¥–Ω–µ–π",
                "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±–æ—Ä–æ—Ç: –æ—Ç 50 –º–ª–Ω —Ä—É–±.",
                "–ó–∞–ª–æ–≥: 10-30% –æ—Ç —Å—É–º–º—ã –≥–∞—Ä–∞–Ω—Ç–∏–∏"
            ]
        elif "44-—Ñ–∑" in keyword.lower():
            return [
                "44-–§–ó –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 2013 –≥–æ–¥–∞",
                "–ü–æ–∫—Ä—ã–≤–∞–µ—Ç 80% –≥–æ—Å–∑–∞–∫—É–ø–æ–∫",
                "–°—É–º–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏: 5-30% –æ—Ç –ù–ú–¶–ö",
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç 500 —Ç—ã—Å. —Ä—É–±."
            ]
        elif "—Ä–µ–µ—Å—Ç—Ä" in keyword.lower():
            return [
                "–ï–ò–° —Å–æ–∑–¥–∞–Ω –≤ 2011 –≥–æ–¥—É",
                "–°–æ–¥–µ—Ä–∂–∏—Ç 2+ –º–ª–Ω –∑–∞–ø–∏—Å–µ–π",
                "–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                "–î–æ—Å—Ç—É–ø–µ–Ω 24/7",
                "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö"
            ]
        else:
            return [
                f"–ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã {keyword}",
                f"–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ {keyword}",
                f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ {keyword}",
                f"–ó–Ω–∞—á–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ {keyword}",
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {keyword}"
            ]
    
    def gather_expert_opinions(self, keyword):
        """–°–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –º–Ω–µ–Ω–∏–π"""
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword.lower():
            return [
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å 3-5 –±–∞–Ω–∫–æ–≤",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —Ä–æ—Å—Ç –æ–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –±–∞–Ω–∫–æ–≤",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—Ç –æ —Ä–∏—Å–∫–∞—Ö –∑–∞–Ω–∏–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"
            ]
        elif "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword.lower():
            return [
                "–Æ—Ä–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Ç—ã –ø–∞–∫–µ—Ç–∞",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –¥–µ–ª–∞—Ç—å –∫–æ–ø–∏–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –±–∞–Ω–∫–æ–º"
            ]
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in keyword.lower():
            return [
                "–≠–∫—Å–ø–µ—Ä—Ç—ã –Ω–∞—Å—Ç–∞–∏–≤–∞—é—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö",
                "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç —Ä–æ—Å—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –±–∞–Ω–∫ –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö"
            ]
        else:
            return [
                f"–ú–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ {keyword}",
                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ {keyword}",
                f"–°–æ–≤–µ—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ {keyword}",
                f"–ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ {keyword}",
                f"–ü—Ä–æ–≥–Ω–æ–∑—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ {keyword}"
            ]
    
    def find_case_studies(self, keyword):
        """–ü–æ–∏—Å–∫ –∫–µ–π—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        if "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" in keyword.lower():
            return [
                "–ö–µ–π—Å: –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
                "–ü—Ä–∏–º–µ—Ä: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π 5 –±–∞–Ω–∫–æ–≤",
                "–ò—Å—Ç–æ—Ä–∏—è: –≠–∫–æ–Ω–æ–º–∏—è 50 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏",
                "–°–ª—É—á–∞–π: –û—à–∏–±–∫–∞ –≤ –æ–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ",
                "–ü—Ä–∏–º–µ—Ä: –£—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å"
            ]
        elif "–¥–æ–∫—É–º–µ–Ω—Ç—ã" in keyword.lower():
            return [
                "–ö–µ–π—Å: –û—Ç–∫–∞–∑ –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤—ã–ø–∏—Å–∫–∏",
                "–ü—Ä–∏–º–µ—Ä: –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–∞—á–∞ —Å –ø–æ–ª–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º",
                "–ò—Å—Ç–æ—Ä–∏—è: –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–∫–∏",
                "–°–ª—É—á–∞–π: –ë—ã—Å—Ç—Ä–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö",
                "–ü—Ä–∏–º–µ—Ä: –û—Ç–∫–∞–∑ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞"
            ]
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in keyword.lower():
            return [
                "–ö–µ–π—Å: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏",
                "–ü—Ä–∏–º–µ—Ä: –°–ø–∞—Å–µ–Ω–∏–µ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
                "–ò—Å—Ç–æ—Ä–∏—è: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ",
                "–°–ª—É—á–∞–π: –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                "–ü—Ä–∏–º–µ—Ä: –û—Ç–∑—ã–≤ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–∞–Ω–∫–æ–º"
            ]
        else:
            return [
                f"–£—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å {keyword}",
                f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è {keyword}",
                f"–ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {keyword}",
                f"–°–ª—É—á–∞–π —Å {keyword}",
                f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä {keyword}"
            ]
    
    def get_fallback_research(self, keyword):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
                "search_volume": "–°—Ä–µ–¥–Ω–∏–π",
                "competition_level": "–°—Ä–µ–¥–Ω—è—è",
                "user_intent": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π",
                "popular_questions": [f"–ß—Ç–æ —Ç–∞–∫–æ–µ {keyword}?", f"–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å {keyword}?"],
                "target_audience": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏, —Ç–µ–Ω–¥–µ—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
                "region": "–†–æ—Å—Å–∏—è",
                "industry_context": "–û–±—â–∞—è",
                "pain_points": ["–ù–µ –∑–Ω–∞—é—Ç –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å", "–ù–µ –ø–æ–Ω–∏–º–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
                "solutions": ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏"],
                "thematic_areas": [f"–û—Å–Ω–æ–≤—ã {keyword}", f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ {keyword}"],
                "unique_aspects": [f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞ {keyword}", f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {keyword}"],
                "statistical_data": [f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {keyword}", f"–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ {keyword}"],
                "trends_tendencies": [f"–¢—Ä–µ–Ω–¥—ã {keyword}", f"–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è {keyword}"],
                "key_facts_figures": [f"–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã {keyword}", f"–í–∞–∂–Ω—ã–µ —Ü–∏—Ñ—Ä—ã {keyword}"],
                "expert_opinions": [f"–ú–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ {keyword}", f"–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ {keyword}"],
                "case_studies": [f"–ü—Ä–∏–º–µ—Ä—ã {keyword}", f"–ö–µ–π—Å—ã –ø–æ {keyword}"]
            }
    
    def evaluate_content_quality(self, content, keyword):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (0-100 –±–∞–ª–ª–æ–≤)"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ (25 –±–∞–ª–ª–æ–≤) - –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –æ—Ü–µ–Ω–∫–∞
        word_count = len(content.split())
        if word_count >= 2500:
            score += 25
        elif word_count >= 2000:
            score += 20
        elif word_count >= 1500:
            score += 15
        elif word_count >= 1000:
            score += 10
        elif word_count >= 500:
            score += 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (30 –±–∞–ª–ª–æ–≤) - –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è
        h1_count = content.count('<h1')
        h2_count = content.count('<h2')
        h3_count = content.count('<h3')
        
        if h1_count >= 1:
            score += 8
        if h2_count >= 2:
            score += 12
        elif h2_count >= 1:
            score += 8
        if h3_count >= 3:
            score += 10
        elif h3_count >= 1:
            score += 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (25 –±–∞–ª–ª–æ–≤)
        if '<ul>' in content:
            score += 6
        if '<ol>' in content:
            score += 6
        if '<table' in content:
            score += 8
        if '<blockquote>' in content:
            score += 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (20 –±–∞–ª–ª–æ–≤)
        keyword_occurrences = content.lower().count(keyword.lower())
        content_lower = content.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if keyword_occurrences >= 3 and keyword_occurrences <= 12:
            score += 15
        elif keyword_occurrences >= 1 and keyword_occurrences <= 20:
            score += 10
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        if '<!-- wp:more -->' in content:
            score += 3
        if '<hr>' in content:
            score += 2
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        if keyword_occurrences > 25:
            score -= 10
        
        return min(max(score, 0), 100)
    
    def evaluate_seo_quality(self, content, keyword):
        """–û—Ü–µ–Ω–∫–∞ SEO –∫–∞—á–µ—Å—Ç–≤–∞ (0-100 –±–∞–ª–ª–æ–≤)"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1 (20 –±–∞–ª–ª–æ–≤)
        if '<h1' in content and keyword.lower() in content.lower():
            score += 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç–∞—Ç—å–∏ (20 –±–∞–ª–ª–æ–≤)
        first_300_chars = content[:300].lower()
        if keyword.lower() in first_300_chars:
            score += 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (25 –±–∞–ª–ª–æ–≤)
        h1_count = content.count('<h1')
        h2_count = content.count('<h2')
        h3_count = content.count('<h3')
        
        if h1_count >= 1:
            score += 8
        if h2_count >= 2:
            score += 10
        elif h2_count >= 1:
            score += 6
        if h3_count >= 1:
            score += 7
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (20 –±–∞–ª–ª–æ–≤)
        keyword_occurrences = content.lower().count(keyword.lower())
        word_count = len(content.split())
        
        if word_count > 0:
            keyword_density = (keyword_occurrences / word_count) * 100
            if 0.5 <= keyword_density <= 2.0:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
                score += 20
            elif 0.3 <= keyword_density <= 3.0:
                score += 15
            elif keyword_density <= 5.0:
                score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (10 –±–∞–ª–ª–æ–≤)
        if '<a href=' in content:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–∏—Å–∫–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (5 –±–∞–ª–ª–æ–≤)
        if '<ul>' in content or '<ol>' in content:
            score += 5
        
        return min(score, 100)
    
    def smart_rewrite_content(self, content, keyword, research_data):
        """–£–º–Ω–æ–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å—á–∏–∫
            from smart_content_rewriter import SmartContentRewriter
            
            rewriter = SmartContentRewriter()
            rewritten_content, analysis = rewriter.rewrite_content(content, keyword, research_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            if analysis['template_count'] > 0:
                print(f"   üîÑ –£–º–Ω–æ–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ: —É–±—Ä–∞–Ω–æ {analysis['template_count']} —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
            
            return rewritten_content
            
        except ImportError:
            print("   ‚ö†Ô∏è –ú–æ–¥—É–ª—å —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return content
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è: {e}")
            return content
    
    def evaluate_content_uniqueness(self, content, keyword):
        """–û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        words = content.lower().split()
        unique_words = set(words)
        uniqueness_ratio = len(unique_words) / len(words) if words else 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
        repeated_phrases = 0
        keyword_lower = keyword.lower()
        if keyword_lower in content.lower():
            occurrences = content.lower().count(keyword_lower)
            if occurrences > 15:
                repeated_phrases += 1
        
        # –û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if uniqueness_ratio > 0.7 and repeated_phrases == 0:
            return "–í—ã—Å–æ–∫–∞—è"
        elif uniqueness_ratio > 0.5 and repeated_phrases <= 1:
            return "–°—Ä–µ–¥–Ω—è—è"
        else:
            return "–ù–∏–∑–∫–∞—è"
    
    def save_quality_metrics(self, article_id, quality_score, seo_score, content_rating):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –ë–î"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            INSERT INTO quality_metrics (article_id, metric_type, score, details)
            VALUES (?, ?, ?, ?)
        ''', (article_id, 'content_quality', quality_score, f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'))
        
        cursor.execute('''
            INSERT INTO quality_metrics (article_id, metric_type, score, details)
            VALUES (?, ?, ?, ?)
        ''', (article_id, 'seo_quality', seo_score, f'–û—Ü–µ–Ω–∫–∞ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'))
        
        cursor.execute('''
            INSERT INTO quality_metrics (article_id, metric_type, score, details)
            VALUES (?, ?, ?, ?)
        ''', (article_id, 'content_rating', content_rating, f'–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'))
        
        self.conn.commit()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    automation = WordPressAutomationFinal()
    automation.run_automation()
    
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –∞—É–¥–∏—Ç–∞
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–Ø –ê–£–î–ò–¢–ê –ò –ü–ï–†–ï–ü–ò–°–´–í–ê–ù–ò–Ø –°–¢–ê–¢–ï–ô")
    print("="*60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –∞—É–¥–∏—Ç–∞
    from article_audit_module import ArticleAuditModule
    
    audit_module = ArticleAuditModule("https://bizfin-pro.ru", "bizfin_pro_r", "U3Ep gU2T clRu FcwN QU6l Dsda", "wordpress_articles_final.db")
    audit_module.run_full_audit_and_rewrite()
    
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–Ø –ü–†–û–í–ï–†–ö–ò –†–ê–°–ß–ï–¢–û–í –ò –ß–ò–°–õ–û–í–´–• –î–ê–ù–ù–´–•")
    print("="*60)
    
    from calculation_verification_module import CalculationVerificationModule
    
    verification_module = CalculationVerificationModule(
        "https://bizfin-pro.ru/wp-json/wp/v2",
        "bizfin_pro_r", 
        "U3Ep gU2T clRu FcwN QU6l Dsda",
        "wordpress_articles_final.db"
    )
    verification_module.run_verification()
    
    # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å Yoast SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–Ø YOAST SEO –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    from yoast_seo_optimization_module import YoastSEOOptimizationModule
    
    yoast_module = YoastSEOOptimizationModule(
        "https://bizfin-pro.ru/wp-json/wp/v2",
        "bizfin_pro_r",
        "U3Ep gU2T clRu FcwN QU6l Dsda",
        "wordpress_articles_final.db"
    )
    yoast_module.run_yoast_optimization()

if __name__ == "__main__":
    main()

