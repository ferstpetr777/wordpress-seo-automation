#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è WordPress Automation Script
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
- SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import requests
import json
import sqlite3
import re
from datetime import datetime
import time
from enhanced_content_generator import EnhancedContentGenerator

class EnhancedWordPressAutomation:
    def __init__(self):
        self.wp_url = "https://bizfin-pro.ru/wp-json/wp/v2"
        self.wp_username = "bizfin_pro_r"
        self.wp_app_password = "U3Ep gU2T clRu FcwN QU6l Dsda"
        self.wp_auth = (self.wp_username, self.wp_app_password)
        self.db_path = "wordpress_articles_enhanced.db"
        self.conn = None
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.keywords = [
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ 44 —Ñ–∑ –æ–Ω–ª–∞–π–Ω",
            "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ 5 000 000 –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–ø–∏—Å–æ–∫ 44-—Ñ–∑",
            "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∫–∞–∫",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç –∞–≤–∞–Ω—Å–∞ –æ–±—Ä–∞–∑–µ—Ü —Ç–µ–∫—Å—Ç–∞",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑ –∑–∞–ª–æ–≥–∞ –¥–ª—è –ò–ü",
            "—Å—Ä–æ—á–Ω–∞—è –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—Ç—å –¥–æ ‚Ä¶ (–¥–∞—Ç–∞)",
            "–∫–∞–∫–æ–π –±–∞–Ω–∫ –≤—ã–¥–∞—ë—Ç –±–≥ –¥–µ—à–µ–≤–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞",
            "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–ª—è —Å—Ç—Ä–æ–π–∫–∏/–ø–æ—Å—Ç–∞–≤–∫–∏/—É—Å–ª—É–≥",
            "–æ—Ñ–æ—Ä–º–∏—Ç—å –±–≥ –º–æ—Å–∫–≤–∞/—Å–ø–±/–∏—Ä–∫—É—Ç—Å–∫"
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_generator = EnhancedContentGenerator(
            self.wp_url, self.wp_username, self.wp_app_password, self.db_path
        )
        
        self.initialize_db()
    
    def initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect(self.db_path)
        cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS keyword_research (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                intent_analysis TEXT,
                user_goal TEXT,
                content_focus TEXT,
                priority_sections TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS article_outlines (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                outline_data TEXT,
                quality_score INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                keyword TEXT NOT NULL,
                wp_post_id INTEGER,
                wp_post_url TEXT,
                status TEXT DEFAULT 'draft',
                word_count INTEGER DEFAULT 0,
                quality_score INTEGER DEFAULT 0,
                seo_score INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quality_checks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                article_id INTEGER,
                check_type TEXT,
                result TEXT,
                score INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def analyze_keyword(self, keyword):
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        print(f"   üîç –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            intent_analysis = self.content_generator.analyze_keyword_intent(keyword)
            
            print(f"   üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {intent_analysis['intent']}")
            print(f"   üìã –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {intent_analysis['user_goal']}")
            print(f"   üé® –§–æ–∫—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {intent_analysis['content_focus']}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.save_intent_analysis(keyword, intent_analysis)
            
            return intent_analysis
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return self.get_fallback_intent(keyword)
    
    def save_intent_analysis(self, keyword, intent_analysis):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤ –ë–î"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            INSERT INTO keyword_research (
                keyword, intent_analysis, user_goal, content_focus, priority_sections
            ) VALUES (?, ?, ?, ?, ?)
        ''', (
            keyword,
            json.dumps(intent_analysis, ensure_ascii=False),
            intent_analysis['user_goal'],
            intent_analysis['content_focus'],
            json.dumps(intent_analysis['priority_sections'], ensure_ascii=False)
        ))
        
        self.conn.commit()
    
    def create_adaptive_outline(self, keyword, intent_analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è"""
        print(f"   üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –¥–ª—è: {keyword}")
        
        try:
            outline = self.content_generator.create_adaptive_outline(keyword, intent_analysis)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
            quality_score = self.evaluate_outline_quality(outline)
            outline['quality_score'] = quality_score
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.save_outline_to_db(keyword, outline)
            
            total_words = sum(section["word_count"] for section in outline["sections"])
            print(f"   üìä –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏: {total_words} —Å–ª–æ–≤")
            print(f"   üìã –†–∞–∑–¥–µ–ª–æ–≤ –≤ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–∏: {len(outline['sections'])}")
            print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è: {quality_score}/100")
            
            return outline
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            return self.get_fallback_outline(keyword)
    
    def evaluate_outline_quality(self, outline):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (40 –±–∞–ª–ª–æ–≤)
        if len(outline['sections']) >= 6:
            score += 20
        if len(outline['sections']) >= 8:
            score += 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ (30 –±–∞–ª–ª–æ–≤)
        total_words = sum(section["word_count"] for section in outline["sections"])
        if total_words >= 2000:
            score += 30
        elif total_words >= 1500:
            score += 20
        elif total_words >= 1000:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ (30 –±–∞–ª–ª–æ–≤)
        unique_focuses = set(section.get("focus", "") for section in outline["sections"])
        if len(unique_focuses) >= 5:
            score += 30
        elif len(unique_focuses) >= 3:
            score += 20
        elif len(unique_focuses) >= 2:
            score += 10
        
        return min(score, 100)
    
    def save_outline_to_db(self, keyword, outline):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î"""
        cursor = self.conn.cursor()
        
        cursor.execute('''
            INSERT INTO article_outlines (keyword, outline_data, quality_score)
            VALUES (?, ?, ?)
        ''', (
            keyword, 
            json.dumps(outline, ensure_ascii=False),
            outline.get('quality_score', 0)
        ))
        
        self.conn.commit()
    
    def generate_high_quality_content(self, keyword, outline, intent_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print(f"   ‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è: {keyword}")
        
        try:
            content = self.content_generator.generate_high_quality_content(
                keyword, outline, intent_analysis
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            quality_score = self.evaluate_content_quality(content, keyword)
            seo_score = self.evaluate_seo_quality(content, keyword)
            
            print(f"   üìÑ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏: {len(content.split())} —Å–ª–æ–≤")
            print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {quality_score}/100")
            print(f"   üîç –û—Ü–µ–Ω–∫–∞ SEO: {seo_score}/100")
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ {len(outline['sections'])} —Ä–∞–∑–¥–µ–ª–∞–º")
            
            return content, quality_score, seo_score
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
            return self.get_fallback_content(keyword), 0, 0
    
    def evaluate_content_quality(self, content, keyword):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ (30 –±–∞–ª–ª–æ–≤)
        word_count = len(content.split())
        if word_count >= 2000:
            score += 30
        elif word_count >= 1500:
            score += 20
        elif word_count >= 1000:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (25 –±–∞–ª–ª–æ–≤)
        if '<h1>' in content:
            score += 5
        if '<h2>' in content:
            score += 10
        if '<h3>' in content:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (25 –±–∞–ª–ª–æ–≤)
        if '<ul>' in content:
            score += 8
        if '<ol>' in content:
            score += 7
        if '<table' in content:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (20 –±–∞–ª–ª–æ–≤)
        keyword_occurrences = content.lower().count(keyword.lower())
        if keyword_occurrences <= 10 and keyword_occurrences >= 3:
            score += 20
        elif keyword_occurrences <= 15:
            score += 10
        
        return min(score, 100)
    
    def evaluate_seo_quality(self, content, keyword):
        """–û—Ü–µ–Ω–∫–∞ SEO –∫–∞—á–µ—Å—Ç–≤–∞"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1 (25 –±–∞–ª–ª–æ–≤)
        if f'<h1' in content and keyword.lower() in content.lower():
            score += 25
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ (25 –±–∞–ª–ª–æ–≤)
        first_200_chars = content[:200].lower()
        if keyword.lower() in first_200_chars:
            score += 25
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (25 –±–∞–ª–ª–æ–≤)
        if '<h2>' in content:
            score += 15
        if '<h3>' in content:
            score += 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (25 –±–∞–ª–ª–æ–≤)
        if '<a href=' in content:
            score += 25
        
        return min(score, 100)
    
    def publish_to_wordpress(self, keyword, content, title, slug, quality_score, seo_score):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –≤ WordPress —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏"""
        print(f"   üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress: {title}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        meta_description = self.generate_meta_description(keyword, title, content)
        
        post_data = {
            'title': title,
            'content': content,
            'slug': slug,
            'status': 'draft',
            'meta': {
                '_yoast_wpseo_focuskw': keyword,
                '_yoast_wpseo_metadesc': meta_description,
                '_yoast_wpseo_title': title,
                '_yoast_wpseo_canonical': f"https://bizfin-pro.ru/{slug}/",
                '_yoast_wpseo_meta-robots-noindex': "0",
                '_yoast_wpseo_meta-robots-nofollow': "0",
                'quality_score': quality_score,
                'seo_score': seo_score
            }
        }
        
        try:
            response = requests.post(
                f"{self.wp_url}/posts",
                auth=self.wp_auth,
                json=post_data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 201:
                post = response.json()
                wp_id = post['id']
                wp_url = post['link']
                
                print(f"   ‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω –≤ WordPress (ID: {wp_id})")
                print(f"   üîó URL: {wp_url}")
                print(f"   üìù –°—Ç–∞—Ç—É—Å: –ß–ï–†–ù–û–í–ò–ö (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100, SEO: {seo_score}/100)")
                
                return {
                    'wp_id': wp_id,
                    'wp_url': wp_url,
                    'status': 'draft',
                    'quality_score': quality_score,
                    'seo_score': seo_score
                }
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return None
    
    def generate_meta_description(self, keyword, title, content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
        base_desc = f"{keyword} - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ. "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        additional_text = "–ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏. –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."
        
        meta_desc = base_desc + additional_text
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤
        if len(meta_desc) > 160:
            meta_desc = meta_desc[:157] + "..."
        
        return meta_desc
    
    def save_article_to_db(self, keyword, wp_result):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if wp_result:
            cursor = self.conn.cursor()
            
            word_count = len(wp_result.get('content', '').split()) if 'content' in wp_result else 0
            
            cursor.execute('''
                INSERT INTO articles (
                    keyword, wp_post_id, wp_post_url, status, word_count, 
                    quality_score, seo_score
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                keyword,
                wp_result['wp_id'],
                wp_result['wp_url'],
                wp_result['status'],
                word_count,
                wp_result.get('quality_score', 0),
                wp_result.get('seo_score', 0)
            ))
            
            article_id = cursor.lastrowid
            self.conn.commit()
            
            print(f"   üíæ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID: {article_id}")
            return article_id
        
        return None
    
    def run_enhanced_automation(self):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û WordPress Automation Script")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üéØ –¶–µ–ª—å: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        print("=" * 60)
        
        results = []
        
        for i, keyword in enumerate(self.keywords, 1):
            print(f"\n{'='*60}")
            print(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(self.keywords)}: {keyword}")
            print(f"{'='*60}")
            
            try:
                # 1. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                intent_analysis = self.analyze_keyword(keyword)
                
                # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
                outline = self.create_adaptive_outline(keyword, intent_analysis)
                
                # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content, quality_score, seo_score = self.generate_high_quality_content(
                    keyword, outline, intent_analysis
                )
                
                # 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress
                title = outline['title']
                slug = self.transliterate_keyword(keyword)
                
                wp_result = self.publish_to_wordpress(
                    keyword, content, title, slug, quality_score, seo_score
                )
                
                # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                article_id = self.save_article_to_db(keyword, wp_result)
                
                if wp_result:
                    results.append({
                        'keyword': keyword,
                        'article_id': article_id,
                        'wp_id': wp_result['wp_id'],
                        'wp_url': wp_result['wp_url'],
                        'status': 'success',
                        'word_count': len(content.split()),
                        'quality_score': quality_score,
                        'seo_score': seo_score
                    })
                    print(f"   ‚úÖ –£–°–ü–ï–•: –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ (WP ID: {wp_result['wp_id']})")
                    print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100, SEO: {seo_score}/100")
                else:
                    results.append({
                        'keyword': keyword,
                        'article_id': None,
                        'wp_id': None,
                        'wp_url': None,
                        'status': 'error',
                        'word_count': 0,
                        'quality_score': 0,
                        'seo_score': 0
                    })
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{keyword}'")
                
            except Exception as e:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{keyword}': {str(e)}")
                results.append({
                    'keyword': keyword,
                    'article_id': None,
                    'wp_id': None,
                    'wp_url': None,
                    'status': 'error',
                    'word_count': 0,
                    'quality_score': 0,
                    'seo_score': 0
                })
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.display_enhanced_results(results)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        if self.conn:
            self.conn.close()
            print("\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    def display_enhanced_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*80}")
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –°–ö–†–ò–ü–¢–ê")
        print(f"{'='*80}")
        
        successful = [r for r in results if r['status'] == 'success']
        failed = [r for r in results if r['status'] == 'error']
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(successful)}/{len(results)}")
        print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if successful:
            avg_quality = sum(r['quality_score'] for r in successful) / len(successful)
            avg_seo = sum(r['seo_score'] for r in successful) / len(successful)
            avg_words = sum(r['word_count'] for r in successful) / len(successful)
            
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/100")
            print(f"üîç –°—Ä–µ–¥–Ω—è—è SEO-–æ—Ü–µ–Ω–∫–∞: {avg_seo:.1f}/100")
            print(f"üìÑ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Å—Ç–∞—Ç—å–∏: {avg_words:.0f} —Å–ª–æ–≤")
        
        print(f"\nüìã –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –°–¢–ê–¢–ï–ô:")
        print("-" * 80)
        
        for i, result in enumerate(results, 1):
            keyword = result['keyword']
            wp_id = result['wp_id']
            wp_url = result['wp_url']
            status = result['status']
            word_count = result['word_count']
            quality_score = result['quality_score']
            seo_score = result['seo_score']
            
            if status == 'success':
                print(f"{i:2d}. {keyword}")
                print(f"    ID –≤ –ë–î: {result['article_id']} | WP ID: {wp_id} | –°—Ç–∞—Ç—É—Å: ‚úÖ –°–û–ó–î–ê–ù–ê")
                print(f"    üîó URL: {wp_url}")
                print(f"    üìÑ –û–±—ä–µ–º: {word_count} —Å–ª–æ–≤ | ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100 | üîç SEO: {seo_score}/100")
            else:
                print(f"{i:2d}. {keyword}")
                print(f"    ID –≤ –ë–î: None | WP ID: None | –°—Ç–∞—Ç—É—Å: ‚ùå –û–®–ò–ë–ö–ê")
                print(f"    üîó URL: None")
            
            print()
    
    def transliterate_keyword(self, keyword):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–∞–≥–∞"""
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        result = keyword.lower()
        for ru, en in translit_map.items():
            result = result.replace(ru, en)
        
        # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        result = re.sub(r'[^\w\-]', '-', result)
        result = re.sub(r'-+', '-', result)
        result = result.strip('-')
        
        return result
    
    def get_fallback_intent(self, keyword):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        return {
            'intent': 'informational',
            'user_goal': '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏',
            'content_focus': 'general',
            'priority_sections': ['overview', 'types', 'benefits']
        }
    
    def get_fallback_outline(self, keyword):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ"""
        return {
            'title': f"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            'sections': [
                {'title': '–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è', 'word_count': 300, 'focus': 'definition'},
                {'title': '–í–∏–¥—ã –∏ —Ç–∏–ø—ã', 'word_count': 350, 'focus': 'types'},
                {'title': '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è', 'word_count': 400, 'focus': 'process'},
                {'title': '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'word_count': 300, 'focus': 'requirements'},
                {'title': '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏', 'word_count': 250, 'focus': 'cost'},
                {'title': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã', 'word_count': 200, 'focus': 'tips'}
            ],
            'quality_score': 60
        }
    
    def get_fallback_content(self, keyword):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        return f"""<h1 class="entry-title">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</h1>

<p>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è ‚Äî —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É.</p>

<h2>–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è</h2>
<p>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–∞–Ω–∫–∞ –≤—ã–ø–ª–∞—Ç–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä—É –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–æ–º —Å–≤–æ–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.</p>

<h2>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã</h2>
<ul>
<li>–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</li>
<li>–í–æ–∑–≤—Ä–∞—Ç –∞–≤–∞–Ω—Å–∞</li>
<li>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</li>
</ul>

<h2>–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h2>
<p>–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤: –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏, –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–¥–∞—á–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏.</p>

<p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.</p>"""

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    automation = EnhancedWordPressAutomation()
    automation.run_enhanced_automation()

if __name__ == "__main__":
    main()
